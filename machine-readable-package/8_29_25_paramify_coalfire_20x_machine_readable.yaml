Package:
  CSPName: Paramify
  CSO: Paramify Cloud
  impact: Low
  summaryOfCSO: |
    'The Paramify Cloud (Paramify) is a software platform that automates risk management processes-including compliance planning, solution implementation, gap assessments, and documentation-for cloud service providers, government agencies, and members of the Defense Industrial Base (DIB). Paramify supports adherence to control catalog requirements including NIST 800-53 (FedRAMP, FISMA, GovRAMP, TX-RAMP), NIST 800-171 (CMMC), and standards such as SOC 2, HIPAA, and ISO 27001, with support for additional catalogs and profiles continually expanding. SSP and ATO Package Management - Fast and Easy Setup: Upload previous SSPs or use the intake process to identify your system's elements and security capabilities. Paramify then generates a roadmap to support your risk management and compliance objectives. - Streamlined Control Implementation & Optimization: Visualize progress and manage security program capabilities through a unified dashboard that tracks system elements and responsibilities. - ATO Package Generation: Produce accurate SSP documentation in both digital (OSCAL) and human-readable formats, with flexible export options that support various file types, including but not limited to OSCAL, PDF, Word, and Excel. - Incorporate Changes Efficiently: As your risk management approach evolves, maintaining stack profiles in Paramify reduces manual update errors across documentation. Paramify automatically synchronizes updates to your SSP, CRM, CIS, policies, procedures, and other records to support compliance with evolving data protection requirements. Continuous Monitoring and Issue Management - Automated POA&M Documentation: Automatically manage and update POA&M documentation via a centralized task-priority view, eliminating the need to manage from multiple spreadsheets or scan files. - Vulnerability Management with Duplicate Detection: Automatically close resolved vulnerabilities and employ duplicate detection to ensure accurate issue tracking. - Automated Risk Adjustment: Apply risk adjustments across multiple issues automatically to support consistent prioritization of remediation efforts. - Automated Inventory Reconciliation: Configure and maintain inventory reconciliation rules to generate accurate workbooks automatically, without manual review of scan files-including those for ephemeral virtual hosts. Integration with Your Organization's Processes - Workflow Management: Integrate with issue management tools (e.g., Jira, ServiceNow, GitLab) to facilitate collaboration between DevOps and security teams for timely issue remediation. - Evidence Management: Unified evidence approach that minimizes or eliminates duplicate collection efforts. - API Integrations: Paramify's open API supports custom integrations with system components to facilitate connectivity and interoperability. Available in SaaS and self-hosted implementations.'
  Assessments:
  - Assessment:
      digitalSignature: ef161a28f3d64bef5c21b7748b0f1e4b4943b40e636d940efd461c9186895b4d
      assessorOrg: Coalfire
      date: 7/10/25
      leadAssessor: Jorden Foster
      recommendation: Authorize
      remarks: |
        'Coalfire Systems, Inc. (“Coalfire”), an American Association for Laboratory Accreditation (A2LA) accredited FedRAMP Third-Party Assessment Organization (3PAO), has partnered with Paramify to perform a FedRAMP 20x Validated Assessment. The objective of the assessment is to demonstrate compliance with Key Security Indicators (KSIs) established by FedRAMP for the 20x Phase One Pilot and to work towards FedRAMP authorization. Assessment activities took place between 06/25/2025 and 07/10/2025. Assessment activities were primarily performed directly within the Paramify web application. Paramify has developed a specific FedRAMP 20x program within the application that uses Paramify Risk Solutions to demonstrate compliance with KSIs. Risk Solutions are various security capabilities that are then mapped to requirements. In this case those requirements apply to FedRAMP 20x KSIs. Paramify has developed more than 290 unique Risk Solutions, of these 56 are mapped into the KSIs to detail how Paramify is securing their cloud service offering (CSO). Coalfire’s methodology for the FedRAMP 20x Validated Assessment is based on completeness, accuracy, timeliness, and exceptions when it comes to the automated and manual demonstration of the KSIs. To establish completeness, Coalfire reviewed the inventory and the scripts used to generate it to ensure that the list of applicable resources was identified. To establish accuracy, Coalfire reviewed the evidence provided within the application and ensured that the evidence derived from scripts, integrations, and documentation was representative of the asset inventory. To establish timeliness, Coalfire verified that the application maintains timestamps to ensure that evidence is relevant and that activity against requirements is tracked. To handle exceptions, Paramify allows for evidence, comments, and references to be added to each KSI implementation. Paramify reflects the status for each KSI that is displayed on the program dashboard. Based on the results of the assessment activities Coalfire has produced human-readable and machine-readable assessment reports. These reports detail the status of each KSI validation (True, False, Partial) and provide details on the tests and evidence reviewed by Coalfire in determining implementation status. All evidence was reviewed directly within the Paramify Cloud.'
      KSIs:
      - KSI:
          name: Cloud Native Architecture
          shortName: CNA
          Validations:
          - validation:
              shortName: CNA-01
              description: Configure ALL information resources to limit inbound and outbound traffic
              implementation:
              - >+
                Title: Policy Enforcement Points: Amazon Security Groups

                Content: Paramify Cloud leverages @Amazon Security Groups, a FedRAMP 20x-compliant component, for network access control.


                End User Responsibility: The @DevOps Admin employs @Amazon Security Groups for boundary protection in Paramify Cloud, limiting use to allowed ports, protocols, and services. Traffic to Paramify Cloud is directed through @ALB, then a @WAF, featuring two access points:

                the Paramify Cloud web interface, requiring valid credentials,

                Paramify admin access from authorized devices, secured with two-factor authentication via @Okta IDaaS and @Yubikey.

              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Paramify utilizes a bash script to pull the security group configurations which govern inbound and outbound rules that are authorized for AWS resources. Based on the content of the bash script, all configured security groups are polled for the inbound and outbound rules. JSON output is made available that details the direction, protocol, from port, to port, and CIDRs.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: "AWS Security Group Rules "
                  description: AWS Security Group script
                  instructions: "1. List all security groups in the account aws ec2 describe-security-groups --query 'SecurityGroups[*].GroupId' 2. For each security group, get detailed rules: aws ec2 describe-security-groups --group-ids <sg_id> --query 'SecurityGroups[0].IpPermissions[*]' aws ec2 describe-security-groups --group-ids <sg_id> --query 'SecurityGroups[0].IpPermissionsEgress[*]' Output: Creates JSON with security group rules and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/security_groups.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Security Groups
                      reference: security_groups.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
          - validation:
              shortName: CNA-02
              description: Design systems to minimize the attack surface and minimize lateral movement if compromised
              implementation:
              - >
                Title: CNA-02

                Content: Paramify Cloud is designed to minimize the attack surface and minimize lateral movement by having containerized compute in @EKS which is logically segmented. 
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: '"Paramify utilizes a bash script to perform Amazon Elastic Kubernetes Service (Amazon EKS) microservice segmentation validation. The script checks for default deny network policies across namespaces, verifies virtual private cloud (VPC) container network interface (CNI) plugin configuration for network policy enforcement, examines security group policies for pods, checks worker node security group configurations, and verifies pod resource limits and isolation. Paramify resources operate in us-gov-west-1 with Amazon EKS nodes running within specified subnets. Additional scripts are run to verify web application firewall (WAF) rules and check GuardDuty setup, which further support protection objectives."'
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: EKS Microservice Segmentation (kubectl)
                  description: Script for kubectl EKS Microservice segmentation validation
                  instructions: "1. Check for default deny network policies across namespaces kubectl get networkpolicies -A -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\t\"}{.spec.policyTypes}{\"\\n\"}{end}' 2. Verify VPC CNI plugin configuration for network policy enforcement kubectl describe daemonset aws-node -n kube-system | grep ENABLE_NETWORK_POLICY kubectl describe daemonset aws-node -n kube-system | grep amazon-vpc-cni: 3. Examine security group policies for pods kubectl get securitygrouppolicies.vpcresources.k8s.aws -A -o yaml 4. Check worker node security group configurations `aws ec2 describe-instances --filters \"Name=tag:kubernetes.io/cluster/<CLUSTER_NAME>,Values=owned\"` `aws ec2 describe-instances --instance-ids <INSTANCE_ID> --query \"Reservations[*].Instances[*].SecurityGroups\"` 5. Verify pod resource limits and isolation kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\t\"}{.spec.containers[*].resources}{\"\\n\"}{end}' Output: Creates JSON report with microservice segmentation status and CSV metrics"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/eks_microservice_segmentation.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: EKS Microservice Segmentation JSON
                      reference: eks_microservice_segmentation.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
              - evidence:
                  name: AWS WAF (Web ACLs, Rules, traffic sample)
                  description: This evidence package demonstrates active web application and denial-of-service protections in place for the paramify-gov-prod Application Load Balancer in AWS GovCloud. It includes a complete JSON export of the WAFv2 Web ACL, showing the use of multiple AWS-managed rule sets to filter malicious traffic, along with screenshots confirming the Web ACL is associated with the production ALB and that DDoS protections (ACTIVE_UNDER_DDOS) are enabled. Together, these files validate both rule-based threat mitigation and automated protection against low-reputation sources under DDoS conditions.
                  instructions: "Summary: AWS WAF Denial-of-Service (DoS) Protection Evidence These files collectively demonstrate that AWS WAF is actively protecting the paramify-gov-prod application load balancer from denial-of-service attacks using managed threat rules and DDoS mitigation features. File Name Purpose WAF Rules.png Shows active managed rule groups filtering common, bad input, Linux/Unix threats. WAF Web ACLs.png Confirms WAF is applied to paramify-gov-prod ALB with DDoS protections enabled (ACTIVE_UNDER_DDOS). WAFv2-web-acl.json Full JSON export of WAF config including rule names, actions, and OnSourceDDoSProtectionConfig. WAF AWS Traffic Overview Sample.pdf Optional supporting visual of traffic filtering or blocked requests (not provided here, assumed visual). Denial-of-Service Protection Highlights Active WAF rules: Includes AWSManagedRulesAmazonIpReputationList, AnonymousIpList, and others that block known bad actors. DDoS Mitigation Mode: ALBLowReputationMode set to ACTIVE_UNDER_DDOS, confirming automatic mitigation is triggered when needed. Resource Coverage: Bound to paramify-gov-prod Application Load Balancer in GovCloud."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: WAF AWS Traffic Overview Sample
                      reference: WAF AWS Traffic overview sample.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: WAF Web ACLs
                      reference: WAF Web ACLs.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: WAF Rules
                      reference: WAF Rules.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: WAFv2 Web Acl
                      reference: WAFv2-web-acl.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
              - evidence:
                  name: Guard Duty
                  description: Script for AWS GuardDuty validation
                  instructions: "Check GuardDuty setup - List detector IDs `aws guardduty list-detectors` - Get detector configuration details `aws guardduty get-detector --detector-id <detector-id>` Output: Creates unique JSON file and appends to directory-based monitoring files"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/guard_duty.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Guard Duty
                      reference: guard_duty.json
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: ALB IAM policy
                  description: IAM policy specifying which AWS permissions are allowed on which resources for the Load Balancers
                  instructions: Export IAM policy from ALB in AWS.
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: ALB IAM Policy
                      reference: alb_iam_policy.json
                      outputResults: ""
                      effectiveDate: 2025-06-26T00:00:00.000Z
          - validation:
              shortName: CNA-03
              description: Use logical networking and related capabilities to enforce traffic flow controls
              implementation:
              - >+
                Title: Policy Enforcement Points: Amazon Security Groups

                Content: Paramify Cloud leverages @Amazon Security Groups, a FedRAMP 20x-compliant component, for network access control.


                End User Responsibility: The @DevOps Admin employs @Amazon Security Groups for boundary protection in Paramify Cloud, limiting use to allowed ports, protocols, and services. Traffic to Paramify Cloud is directed through @ALB, then a @WAF, featuring two access points:

                the Paramify Cloud web interface, requiring valid credentials,

                Paramify admin access from authorized devices, secured with two-factor authentication via @Okta IDaaS and @Yubikey.

              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify documents the system ports, protocols, and services. For each of these the platform identifies the name, port, purpose, and used by. Bash scripts are used to pull in inbound and outbound rules configured at the security group level for AWS resources. Additionally, bash scripts verify that the SSL policy configured at AWS load balancers utilize TLS 1.2 and FIPS encryption. The inbound and outbound rules serve to enforce traffic controls in the environment with the load balancers ensuring availability of system resources.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Load Balancer Encryption Status
                  description: Script for Load Balancer Encryption Status Validation
                  instructions: 'Script: load_balancer_encryption_status.sh to check Load Balancer encryption settings Commands executed: 1) Describe load balancers: `aws elbv2 describe-load-balancers` 2) Check listeners: `aws elbv2 describe-listeners --load-balancer-arn <arn> --query "Listeners[*].{Port:Port,Protocol:Protocol,SslPolicy:SslPolicy}"` Output: Creates JSON report with encryption status'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/load_balancer_encryption_status.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Load Balancer Encryption
                      reference: load_balancer_encryption.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Load Balancer Encryption
                      reference: load_balancer_encryption.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: "AWS Security Group Rules "
                  description: AWS Security Group script
                  instructions: "1. List all security groups in the account aws ec2 describe-security-groups --query 'SecurityGroups[*].GroupId' 2. For each security group, get detailed rules: aws ec2 describe-security-groups --group-ids <sg_id> --query 'SecurityGroups[0].IpPermissions[*]' aws ec2 describe-security-groups --group-ids <sg_id> --query 'SecurityGroups[0].IpPermissionsEgress[*]' Output: Creates JSON with security group rules and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/security_groups.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Network Operations
                      reference: Network-Operations.csv
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Security Groups
                      reference: security_groups.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: System Ports, Protocols & Services
                  description: System Ports, Protocols & Services
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: System Ports, Protocols Services
                      reference: System Ports, Protocols & Services.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: ALB IAM policy
                  description: IAM policy specifying which AWS permissions are allowed on which resources for the Load Balancers
                  instructions: Export IAM policy from ALB in AWS.
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: ALB IAM Policy
                      reference: alb_iam_policy.json
                      outputResults: ""
                      effectiveDate: 2025-06-26T00:00:00.000Z
          - validation:
              shortName: CNA-04
              description: Use immutable infrastructure with strictly defined functionality and privileges by default
              implementation:
              - >
                Title: CNA-04

                Content: @EKS runs the @Paramify Cloud application with strictly defined functionality and privileges. Only approved container images in ECR (Elastic Container Registry) are deployed. 
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: Partial
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: '"Paramify utilizes bash scripts check cluster pod security standards and logging configurations, review identity and access management (IAM) roles associated with pods, and check existing Amazon EKS add-ons. Additionally, there are bash scripts that examine pod security contexts and configurations, examine pod policies and validation configurations, check pod security policies, and check network policies. Configurations are applied to both pre-production and production Amazon EKS clusters. Based on evidence from KSI-PIY-1, container images span across two different clusters, Paramify-gov-prod-eks and Paramify-gov-pre-eks."'
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: EKS Least Privilege
                  description: Script for AWS EKS Least Privilege and Security Configuration Validation
                  instructions: "1. Check cluster's pod security standards and logging configuration `aws eks describe-cluster --name [cluster-name] --query \"cluster.logging\"` 2. Review IAM roles associated with pods `aws eks list-pod-identity-associations --cluster-name [cluster-name]` 3. Check existing EKS add-ons `aws eks list-addons --cluster-name [cluster-name]` Output: Creates JSON report with EKS security configuration status"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/eks_least_privilege.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Eks Least Privilege
                      reference: eks_least_privilege.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: EKS Microservice Segmentation (kubectl)
                  description: Script for kubectl EKS Microservice segmentation validation
                  instructions: "1. Check for default deny network policies across namespaces kubectl get networkpolicies -A -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\t\"}{.spec.policyTypes}{\"\\n\"}{end}' 2. Verify VPC CNI plugin configuration for network policy enforcement kubectl describe daemonset aws-node -n kube-system | grep ENABLE_NETWORK_POLICY kubectl describe daemonset aws-node -n kube-system | grep amazon-vpc-cni: 3. Examine security group policies for pods kubectl get securitygrouppolicies.vpcresources.k8s.aws -A -o yaml 4. Check worker node security group configurations `aws ec2 describe-instances --filters \"Name=tag:kubernetes.io/cluster/<CLUSTER_NAME>,Values=owned\"` `aws ec2 describe-instances --instance-ids <INSTANCE_ID> --query \"Reservations[*].Instances[*].SecurityGroups\"` 5. Verify pod resource limits and isolation kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\t\"}{.spec.containers[*].resources}{\"\\n\"}{end}' Output: Creates JSON report with microservice segmentation status and CSV metrics"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/eks_microservice_segmentation.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: EKS Microservice Segmentation JSON
                      reference: eks_microservice_segmentation.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
              - evidence:
                  name: "Paramify EKS Infra Terraform Script "
                  description: "Paramify EKS Infra Terraform Script "
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Aws Paramify EKS Infra
                      reference: aws-paramify-eks-infra.tf
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: Kubectl Security script
                  description: Script for EKS Kubernetes Security Configuration Validation
                  instructions: "1. Examine pod security contexts and configurations kubectl get pods -A -o jsonpath=.... 2. Examine pod policies and validation configurations kubectl get validatingwebhookconfigurations -A -o yaml 3. Check pod security policies kubectl get psp -o yaml 4. Check network policies kubectl get networkpolicies -A -o yaml Output: Creates JSON report with Kubernetes security configuration status"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/kubectl_security.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Kubectl Security JSON
                      reference: kubectl_security.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
          - validation:
              shortName: CNA-05
              description: Have denial of service protection
              implementation:
              - >
                Title: Denial Of Service Protection: Amazon Web Application Firewall

                Content: Paramify Cloud has denial of service protection provided by @WAF, a FedRAMP 20x-compliant component.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Bash scripts indicate that Paramify runs a WAF to provide denial of service protection. The scripts check for all WAFv2 Web access control lists (ACLs) in the region, get detailed configurations, and extract and analyze rules. There are 8 WAF rules that are configured which are set at various priority levels. WAF traffic overview indicates that blocking actions have taken place based on the configured rules. Paramify-gov-prod is listed as being under active under DDoS for resource level protection.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: AWS WAF (Web ACLs, Rules, traffic sample)
                  description: This evidence package demonstrates active web application and denial-of-service protections in place for the paramify-gov-prod Application Load Balancer in AWS GovCloud. It includes a complete JSON export of the WAFv2 Web ACL, showing the use of multiple AWS-managed rule sets to filter malicious traffic, along with screenshots confirming the Web ACL is associated with the production ALB and that DDoS protections (ACTIVE_UNDER_DDOS) are enabled. Together, these files validate both rule-based threat mitigation and automated protection against low-reputation sources under DDoS conditions.
                  instructions: "Summary: AWS WAF Denial-of-Service (DoS) Protection Evidence These files collectively demonstrate that AWS WAF is actively protecting the paramify-gov-prod application load balancer from denial-of-service attacks using managed threat rules and DDoS mitigation features. File Name Purpose WAF Rules.png Shows active managed rule groups filtering common, bad input, Linux/Unix threats. WAF Web ACLs.png Confirms WAF is applied to paramify-gov-prod ALB with DDoS protections enabled (ACTIVE_UNDER_DDOS). WAFv2-web-acl.json Full JSON export of WAF config including rule names, actions, and OnSourceDDoSProtectionConfig. WAF AWS Traffic Overview Sample.pdf Optional supporting visual of traffic filtering or blocked requests (not provided here, assumed visual). Denial-of-Service Protection Highlights Active WAF rules: Includes AWSManagedRulesAmazonIpReputationList, AnonymousIpList, and others that block known bad actors. DDoS Mitigation Mode: ALBLowReputationMode set to ACTIVE_UNDER_DDOS, confirming automatic mitigation is triggered when needed. Resource Coverage: Bound to paramify-gov-prod Application Load Balancer in GovCloud."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: WAF AWS Traffic Overview Sample
                      reference: WAF AWS Traffic overview sample.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: WAF Web ACLs
                      reference: WAF Web ACLs.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: WAF Rules
                      reference: WAF Rules.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: WAFv2 Web Acl
                      reference: WAFv2-web-acl.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
              - evidence:
                  name: WAF DoS Rules
                  description: Script for WAF DoS rules validation
                  instructions: "1. List all WAFv2 Web ACLs in the region `aws wafv2 list-web-acls --scope REGIONAL --query 'WebACLs[*].[Id, Name]'` 2. For each Web ACL, get detailed configuration: `aws wafv2 get-web-acl --scope REGIONAL --name <name> --id <id>` 3. Extract and analyze rules for: - Rate-based rules (DoS protection) - AWS managed rule groups with DoS protection Output: Creates JSON with WAF rules and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/waf_DoS_rules.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Waf Dos Rules
                      reference: waf_dos_rules.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: AWS WAF (Web ACLs, Rules, traffic sample)
                  description: This evidence package demonstrates active web application and denial-of-service protections in place for the paramify-gov-prod Application Load Balancer in AWS GovCloud. It includes a complete JSON export of the WAFv2 Web ACL, showing the use of multiple AWS-managed rule sets to filter malicious traffic, along with screenshots confirming the Web ACL is associated with the production ALB and that DDoS protections (ACTIVE_UNDER_DDOS) are enabled. Together, these files validate both rule-based threat mitigation and automated protection against low-reputation sources under DDoS conditions.
                  instructions: "Summary: AWS WAF Denial-of-Service (DoS) Protection Evidence These files collectively demonstrate that AWS WAF is actively protecting the paramify-gov-prod application load balancer from denial-of-service attacks using managed threat rules and DDoS mitigation features. File Name Purpose WAF Rules.png Shows active managed rule groups filtering common, bad input, Linux/Unix threats. WAF Web ACLs.png Confirms WAF is applied to paramify-gov-prod ALB with DDoS protections enabled (ACTIVE_UNDER_DDOS). WAFv2-web-acl.json Full JSON export of WAF config including rule names, actions, and OnSourceDDoSProtectionConfig. WAF AWS Traffic Overview Sample.pdf Optional supporting visual of traffic filtering or blocked requests (not provided here, assumed visual). Denial-of-Service Protection Highlights Active WAF rules: Includes AWSManagedRulesAmazonIpReputationList, AnonymousIpList, and others that block known bad actors. DDoS Mitigation Mode: ALBLowReputationMode set to ACTIVE_UNDER_DDOS, confirming automatic mitigation is triggered when needed. Resource Coverage: Bound to paramify-gov-prod Application Load Balancer in GovCloud."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: WAF AWS Traffic Overview Sample
                      reference: WAF AWS Traffic overview sample.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: WAF Web ACLs
                      reference: WAF Web ACLs.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: WAF Rules
                      reference: WAF Rules.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: WAFv2 Web Acl
                      reference: WAFv2-web-acl.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
          - validation:
              shortName: CNA-06
              description: Design systems for high availability and rapid recovery
              implementation:
              - >
                Title: AWS GovCloud

                Content: Paramify Cloud currently resides on @AWS GovCloud within multiple availability zones. All infrastructure components within the Paramify Cloud authorization boundary is managed utilizing @AWS GovCloud. Therefore, remaining physical and environmental protection implementations are inherited from @AWS GovCloud.


                Paramify production @EKS containers, @RDS (Postgres) database, and @S3 data storage are configured to multi availability zones for high availability. 
              - >
                Title: Contingency Plan Test

                Content: Paramify Cloud uses @EKS and operates in multiple availability zones. @Contingency Plan Test Process is performed annually and aims to quickly restore system functionality in case of an outage. The test includes a walkthrough, tabletop exercise, advanced tabletop/simulation, or functional exercise. Results are reviewed by the @GRC Admin and @DevOps Admin to determine necessary changes which are tracked for resolution in @GitLab.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Paramify performed disaster recovery tests to failover from us-gov-west-1 to us-gov-east-2 to support rapid recovery. Paramify's production database is set to multi-az.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Disaster Recovery Test Results
                  description: Disaster Recovery Test Results
                  instructions: Paramify performs disaster recovery tests annually to failover from us-gov-west-1 to us-gov-east-2 to support rapid recovery. Paramify's production database is set to multi-az.
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: DR Test Results From 2024 10 24
                      reference: DR Test Results from 2024-10-24 (1).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Auto Scaling High Availability validation
                  description: Auto Scaling High Availability validation
                  instructions: "Helper script for Auto Scaling High Availability validation Script: auto_scaling_high_availability.sh Commands executed: 1) Describe auto scaling groups: `aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[*]'` 2) Describe auto scaling instances: `aws autoscaling describe-auto-scaling-instances --query \\\"AutoScalingInstances[?AutoScalingGroupName=='[asg-name]'][*]\\\"` 3) Describe scaling policies: `aws autoscaling describe-policies --query 'ScalingPolicies[*]'` Output: Creates JSON with auto scaling high availability details and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Auto Scaling High Availability
                      reference: auto_scaling_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: AWS Resources High Availability Summary
                  description: >-
                    Collection of scripts and evidence relating to High Availability of AWS resources


                    Note: Prod DB is Multi AZ but Pre DB and GitLab self-hosted DB are not multi-AZ because they don't have any customer data and need high uptime.
                  instructions: "Collection of scripts and evidence relating to High Availability of AWS resources Note: RDS Production Database is configured to be multi-az but the other non-production databases (eg: gitaly and pre-prod) are not essential for high availability and thus are not configured to be multi-az."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Database High Availability
                      reference: database_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Load Balancer High Availability
                      reference: load_balancer_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Aws High Availability
                      reference: aws_high_availability.csv
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Efs High Availability
                      reference: efs_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Backup Recovery High Availability
                      reference: backup_recovery_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Network Resilience High Availability
                      reference: network_resilience_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Aws High Availability
                      reference: aws_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Cloudwatch High Availability
                      reference: cloudwatch_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Eks High Availability
                      reference: eks_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
          - validation:
              shortName: CNA-07
              description: Ensure cloud-native information resources are implemented based on host provider's best practices and documented guidance
              implementation:
              - >
                Title: CNA-07

                Content: @AWS Config records and reports on the implementation status of Paramify Cloud's cloud native information resources compared to @AWS GovCloud's best practices and documented guidance.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Bash scripts output the results from 3 different conformance packs via AWS Config. The conformance packs used are CIS-Level-2-for-AWS-v1-4, FedRAMP-Low-Operational-Best-Practices, and s3conformancepack. The reports output where Paramify is compliant or non-compliant against various configuration rules. By benchmarking against these conformance packs Paramify is able to work towards best practices in AWS.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: AWS Config Conformance Packs
                  description: >-
                    Script for AWS Config Conformance Packs validation


                    Note: Some AWS Config rules report as non-compliant, these have been identified by Paramify InfoSec team as non-important as they either address unused AWS services or non-important aspects to configuring resources given the Paramify environment.
                  instructions: '1. List all conformance packs `aws configservice describe-conformance-packs --query "ConformancePackNames[]" --output text` 2. For each conformance pack, get: - Status details `aws configservice describe-conformance-pack-status --conformance-pack-names "$pack"` - Compliance summary `aws configservice get-conformance-pack-compliance-summary --conformance-pack-names "$pack"` - Detailed compliance results `aws configservice get-conformance-pack-compliance-details --conformance-pack-name "$pack"` Output: Creates JSON with conformance pack details and writes to CSV'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Aws Config Conformance Packs
                      reference: aws_config_conformance_packs.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Aws Config Conformance Packs
                      reference: aws_config_conformance_packs.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/aws_config_conformance_packs.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
      - KSI:
          name: Service Configuration
          shortName: SVC
          Validations:
          - validation:
              shortName: SVC-01
              description: Harden and review network and system configurations
              implementation:
              - >
                Title: Baseline Configuration Standard

                Content: The @DevOps Admin maintains a current baseline configuration of Paramify Cloud in @GitLab, as outlined in the @Configuration Management Plan. This includes:

                Hardening Paramify Cloud for security while maintaining functionality.

                Enabling only essential ports, protocols, and services.

                Ensuring associated accounts are secure and compliant.

                Disabling non-essential functions, ports, protocols, and services.

                Adhering to the principle of least privilege for device operations and access.


                Authorized personnel approve, test, and deploy any changes to these baselines through the @Change Management Process, with updates documented in @GitLab.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Hardening and reviews are done through the use of AWS Config conformance packs to identify areas of non-compliance with various benchmarks. AWS Config is used as a status and reporting mechanism to identify areas of non-compliance. There is a hardening script that is run in Kubernetes and the overall continuous integration/continuous delivery (CI/CD) pipeline has steps to harden the image and make sure it is in a good place prior to deployment.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: AWS Config Conformance Packs
                  description: >-
                    Script for AWS Config Conformance Packs validation


                    Note: Some AWS Config rules report as non-compliant, these have been identified by Paramify InfoSec team as non-important as they either address unused AWS services or non-important aspects to configuring resources given the Paramify environment.
                  instructions: '1. List all conformance packs `aws configservice describe-conformance-packs --query "ConformancePackNames[]" --output text` 2. For each conformance pack, get: - Status details `aws configservice describe-conformance-pack-status --conformance-pack-names "$pack"` - Compliance summary `aws configservice get-conformance-pack-compliance-summary --conformance-pack-names "$pack"` - Detailed compliance results `aws configservice get-conformance-pack-compliance-details --conformance-pack-name "$pack"` Output: Creates JSON with conformance pack details and writes to CSV'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Aws Config Conformance Packs
                      reference: aws_config_conformance_packs.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Aws Config Conformance Packs
                      reference: aws_config_conformance_packs.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/aws_config_conformance_packs.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
              - evidence:
                  name: "AWS Security Group Rules "
                  description: AWS Security Group script
                  instructions: "1. List all security groups in the account aws ec2 describe-security-groups --query 'SecurityGroups[*].GroupId' 2. For each security group, get detailed rules: aws ec2 describe-security-groups --group-ids <sg_id> --query 'SecurityGroups[0].IpPermissions[*]' aws ec2 describe-security-groups --group-ids <sg_id> --query 'SecurityGroups[0].IpPermissionsEgress[*]' Output: Creates JSON with security group rules and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/security_groups.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Network Operations
                      reference: Network-Operations.csv
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Security Groups
                      reference: security_groups.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: Paramify CI/CD Pipeline (with scan example)
                  description: >-
                    Paramify CI/CD Pipeline with scans example. See Instructions for detailed explanation of the security components involved in the pipeline.


                    Complete YAML of GitLab pipeline is provided with visualization of steps and example screenshots showing what the process looks like from the DevOps side.
                  instructions: "Paramify CI/CD Pipeline with security scans Paramify's GitLab CI/CD pipeline includes multiple layers of security and change management to ensure software artifacts are secure, policy-compliant, and auditable at every stage of delivery. 1. Hardened Base Images All container images are built using Wolfi base images from Chainguard: image: name: cgr.dev/chainguard/node:22@sha256:... These distroless, minimal images are curated to include zero or minimal known CVEs, significantly reducing the baseline attack surface. 2. Mandatory Security Scanning Security scans are integrated directly into the CI pipeline to enforce vulnerability thresholds before deployment or merging. Static Code Analysis (SAST):Uses Semgrep to detect common coding vulnerabilities: test_sast: image: semgrep/semgrep:latest script: - semgrep ci --config auto npm Dependency Auditing:npm audit checks for vulnerable third-party packages: script: - npm audit --audit-level high - npm audit signatures Container Vulnerability Scanning:Uses Grype with a customized GRYPE_CONFIG to filter false positives while enforcing a --fail-on medium policy: script: - grype --fail-on medium --config ~/grype.yaml \"${ECR_URL}/paramify:${CI_COMMIT_SHORT_SHA}\" Scanning is enforced during the test stage before deployment, ensuring insecure builds do not reach production. 3. Secure Build and Deployment Controls Builds are executed using Kaniko: image: gcr.io/kaniko-project/executor:v1.23.2-debug script: - /kaniko/executor --context=... --destination=... Applications are deployed to Kubernetes via kubectl only on merge to main: deploy_eks: rules: - if: $CI_COMMIT_BRANCH == \"main\" A review environment is spun up dynamically for merge requests and is manually stoppable: deploy_review: environment: name: review/$CI_MERGE_REQUEST_IID-$CI_COMMIT_REF_SLUG url: https://$CI_MERGE_REQUEST_IID.dev.paramify.com Images cannot be pushed to ECR unless they pass all prior vulnerability scans and build stages. 4. Vulnerability Exception and Change Control Process If vulnerabilities are discovered that cannot be immediately remediated (e.g., in upstream npm packages or OS dependencies), a ticket is created in the CloudOps Change Management GitLab, which is:Self-hosted within AWS GovCloud FedRAMP boundary for controlled access. Used to track, review, and approve exceptions and mitigation steps. This ensures:Accountability for deferred patching. Auditability of all risk decisions. Traceability from detection to resolution. Summary This pipeline enforces a “no deploy without remediation” policy through automated scanning, minimal and verified base images, and integrated exception management workflows."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Grype Paramify 2024 09 26
                      reference: grype_paramify_2024-09-26.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Update Base Image To 20240930 Middot Merge Requests Middot Paramify Paramify Middot Git Lab
                      reference: Update base image to 20240930 (50) middot Merge requests middot Paramify _ paramify middot GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: CI/CD pipeline visualization
                      reference: Screenshot 2025-06-30 at 5.07.32 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: CI/CD Pipeline (machine-readable code)
                      reference: ci-cd-pipeline.yaml
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: Kubectl Hardening script
                  description: Kubectl hardening script
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Harden
                      reference: harden.txt
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
          - validation:
              shortName: SVC-02
              description: Encrypt or otherwise secure network traffic
              implementation:
              - >
                Title: Protection of Data in Transit

                Content: Paramify Cloud is hosted on FedRAMP 20x-compliant component. All network traffic between data centers and within isolated cloud environments is transparently encrypted with FIPS 140-2 validated modules.


                End User Responsibility: Inbound internet traffic to Paramify Cloud is restricted to TLS and SSH encrypted ports, which use FIPS validated modules. Non-secure protocols are not permitted. Firewall rules defined in @Amazon Security Groups enforce the restriction.
              - >
                Title: Internal Connections: AWS GovCloud

                Content: Paramify Cloud is hosted on FedRAMP 20x-compliant @AWS GovCloud. All network traffic between @AWS GovCloud data centers and within private cloud networks is transparently encrypted with FIPS 140-2 validated modules.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: '"Bash scripts check load balancer encryption settings and reflect that all load balancers are encrypted using SSL Policy: ELBSecurityPolicy-TLS13-1-2-FIPS-2023-04. Additionally, there are checks for Amazon Simple Storage Service (Amazon S3) bucket policies to enforce HTTPS and check RDS parameter groups for rds.force_ssl = 1. S3 buckets are reflected as showing to deny non-HTTPS access. SSL server test reflects an A result with support for only TLS 1.2 communications for publicly resolvable endpoints. SSL is being enforced for all S3 and RDS resources identified through the bash scripts executed by Paramify. The summary indicates that 27 S3 resources have enforcement and 3 RDS resources have enforcement."'
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Load Balancer Encryption Status
                  description: Script for Load Balancer Encryption Status Validation
                  instructions: 'Script: load_balancer_encryption_status.sh to check Load Balancer encryption settings Commands executed: 1) Describe load balancers: `aws elbv2 describe-load-balancers` 2) Check listeners: `aws elbv2 describe-listeners --load-balancer-arn <arn> --query "Listeners[*].{Port:Port,Protocol:Protocol,SslPolicy:SslPolicy}"` Output: Creates JSON report with encryption status'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/load_balancer_encryption_status.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Load Balancer Encryption
                      reference: load_balancer_encryption.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Load Balancer Encryption
                      reference: load_balancer_encryption.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: AWS Component SSL Enforcement Status
                  description: Script for automated validation of AWS Component SSL/TLS Enforcement Status
                  instructions: "1. Check S3 bucket policies for enforced HTTPS (aws:SecureTransport) `aws s3api list-buckets` `aws s3api get-bucket-policy --bucket <bucket-name>` 2. Check RDS parameter groups for rds.force_ssl = 1 `aws rds describe-db-instances` `aws rds describe-db-parameters --db-parameter-group-name <pg-name>` Output: Creates JSON report with SSL enforcement status."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/aws_component_ssl_enforcement_status.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Aws Component Ssl Enforcement
                      reference: aws_component_ssl_enforcement.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: AWS Component SSL Enforcement Status script
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/aws_component_ssl_enforcement_status.sh
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Aws Component Ssl Enforcement
                      reference: aws_component_ssl_enforcement.json
                      outputResults: ""
                      effectiveDate: 2025-07-08T00:00:00.000Z
              - evidence:
                  name: Qualys SSL server lab test reports
                  description: Qualys SSL server lab test report for all publicly facing URLs, showing encryption capabilities for data in transit. (e.g., website HTTPS/TLS configurations)  https://www.ssllabs.com/ssltest/
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: proxy.paramify.com SSL Server Test
                      reference: SSL Server Test_ proxy.paramify.com (Powered by Qualys SSL Labs).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: app.paramify.com SSL Server Test
                      reference: SSL Server Test_ app.paramify.com (Powered by Qualys SSL Labs).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: registry.paramify.com SSL Server Test
                      reference: SSL Server Test_ registry.paramify.com (Powered by Qualys SSL Labs).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Appendix Q Paramify Encryption Implementation Status
                  description: Appendix Q Paramify Encryption Implementation Status
                  instructions: Auto-generated by Paramify's Document Robot
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Cloud SSP Appendix Q Fed RAMP
                      reference: Paramify Cloud-SSP-Appendix_Q-FedRAMP.docx
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Data in transit inventory
                  description: Data in transit inventory
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Data In Transit Inventory
                      reference: Data in transit inventory.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: AWS Component SSL Enforcement Status
                  description: Script for automated validation of AWS Component SSL/TLS Enforcement Status
                  instructions: "1. Check S3 bucket policies for enforced HTTPS (aws:SecureTransport) `aws s3api list-buckets` `aws s3api get-bucket-policy --bucket <bucket-name>` 2. Check RDS parameter groups for rds.force_ssl = 1 `aws rds describe-db-instances` `aws rds describe-db-parameters --db-parameter-group-name <pg-name>` Output: Creates JSON report with SSL enforcement status."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/aws_component_ssl_enforcement_status.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Aws Component Ssl Enforcement
                      reference: aws_component_ssl_enforcement.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: AWS Component SSL Enforcement Status script
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/aws_component_ssl_enforcement_status.sh
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Aws Component Ssl Enforcement
                      reference: aws_component_ssl_enforcement.json
                      outputResults: ""
                      effectiveDate: 2025-07-08T00:00:00.000Z
              - evidence:
                  name: Qualys SSL server lab test reports
                  description: Qualys SSL server lab test report for all publicly facing URLs, showing encryption capabilities for data in transit. (e.g., website HTTPS/TLS configurations)  https://www.ssllabs.com/ssltest/
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: proxy.paramify.com SSL Server Test
                      reference: SSL Server Test_ proxy.paramify.com (Powered by Qualys SSL Labs).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: app.paramify.com SSL Server Test
                      reference: SSL Server Test_ app.paramify.com (Powered by Qualys SSL Labs).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: registry.paramify.com SSL Server Test
                      reference: SSL Server Test_ registry.paramify.com (Powered by Qualys SSL Labs).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
          - validation:
              shortName: SVC-03
              description: Encrypt all federal and sensitive information at rest
              implementation:
              - >
                Title: Server-Side Encryption Protection: Amazon Server-Side Encryption

                Content: Paramify Cloud uses @AWS GovCloud, a FedRAMP 20x-compliant cloud component that meets data protection requirements.


                End User Responsibility: All customer data uploaded to Paramify Cloud by the customer in @AWS GovCloud are encrypted using @Amazon Server-Side Encryption, with AES-256 keys while they are stored within the environment. All disks that contain customer data are encrypted using OS level encryption. All encryption within the environment is done using a FIPS 140-2 validated module. The same encryption mechanisms are applied to backup systems and data stores that contain customer data.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: "Bash scripts to pull all Amazon S3 buckets and check for encryption at rest, list and check Amazon Relational Database Service (Amazon RDS) instance encryption at rest, list and check Amazon RDS aurora cluster encryption at rest, check Amazon Elastic Block Store (Amazon EBS) encryption default settings, list and check EBS volume encryption at rest, and list and check Amazon Elastic File System (Amazon EFS) encryption at rest. Amazon EBS volumes are all showing encrypted: true. Load balancer encryption is all set to true. Amazon RDS encryption is all set to true. Amazon S3 buckets are all set to true. The percent of assets and their encryption status shows as 100 percent."
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Block Storage Encryption Status
                  description: Script for AWS Block Storage Encryption at rest
                  instructions: '1. Check EBS encryption default settings `aws ec2 get-ebs-encryption-by-default` `aws ec2 get-ebs-default-kms-key-id` 2. List and check EBS volume encryption at rest `aws ec2 describe-volumes --query "Volumes[*].VolumeId"` `aws ec2 describe-volumes --volume-ids [volume-id]` 3. List and check EFS file system encryption at rest `aws efs describe-file-systems --query "FileSystems[*].FileSystemId"` `aws efs describe-file-systems --file-system-id [fs-id]` Output: Creates JSON report with block storage encryption at rest status'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/block_storage_encryption_status.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Block Storage Encryption Status
                      reference: block_storage_encryption_status.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: S3 Encryption Status
                  description: AWS S3 bucket encryption status at rest check script
                  instructions: 'List and check S3 bucket encryption at rest Script: s3_encryption_status.sh Commands executed: 1) List S3 buckets: aws s3api list-buckets --query "Buckets[*].Name" 2) For each bucket, check encryption: aws s3api get-bucket-encryption --bucket [bucket-name] Output: Creates JSON report with S3 encryption at rest status'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/s3_encryption_status.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Data Protection
                      reference: Data-Protection.csv
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Data Protection
                      reference: Data-Protection.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: AWS S3 SSL Enforcement
                      reference: aws_component_ssl_enforcement.json
                      outputResults: ""
                      effectiveDate: 2025-07-08T00:00:00.000Z
              - evidence:
                  name: Load Balancer Encryption Status
                  description: Script for Load Balancer Encryption Status Validation
                  instructions: 'Script: load_balancer_encryption_status.sh to check Load Balancer encryption settings Commands executed: 1) Describe load balancers: `aws elbv2 describe-load-balancers` 2) Check listeners: `aws elbv2 describe-listeners --load-balancer-arn <arn> --query "Listeners[*].{Port:Port,Protocol:Protocol,SslPolicy:SslPolicy}"` Output: Creates JSON report with encryption status'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/load_balancer_encryption_status.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Load Balancer Encryption
                      reference: load_balancer_encryption.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Load Balancer Encryption
                      reference: load_balancer_encryption.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: RDS Encryption Status
                  description: Script for AWS RDS Encryption at rest validation
                  instructions: '1. List and check RDS instance encryption at rest `aws rds describe-db-instances --query "DBInstances[*].DBInstanceIdentifier"` `aws rds describe-db-instances --db-instance-identifier [instance-name]` 2. List and check RDS Aurora cluster encryption at rest `aws rds describe-db-clusters --query "DBClusters[*].DBClusterIdentifier"` `aws rds describe-db-clusters --db-cluster-identifier [cluster-name]` Output: Creates JSON report with RDS encryption at rest status'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/rds_encryption_status.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Rds Encryption Status
                      reference: rds_encryption_status.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: Appendix Q Paramify Encryption Implementation Status
                  description: Appendix Q Paramify Encryption Implementation Status
                  instructions: Auto-generated by Paramify's Document Robot
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Cloud SSP Appendix Q Fed RAMP
                      reference: Paramify Cloud-SSP-Appendix_Q-FedRAMP.docx
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Data at rest inventory
                  description: Data at rest inventory
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Data At Rest Inventory
                      reference: Data at rest inventory.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
          - validation:
              shortName: SVC-04
              description: Manage configuration centrally
              implementation:
              - >
                Title: Approved Software Review

                Content: Paramify uses @Terraform to install infrastructure services on @AWS GovCloud. Software is deployed to @EKS nodes using @Helm. The @Change Control Board meets weekly to review changes to Paramify Cloud, including @Helm and @Terraform scripts that reside in @GitLab. If a software reaches end-of-life, is not appropriately licensed, or critical threats are detected, the @Change Control Board and @DevOps Admin collaborate to identify an authorized replacement and scripts are updated.
              - >
                Title: Configuration Checks: CIS L2

                Content: Paramify uses @AWS Config, a FedRAMP 20x-compliant component, for configuration checks.


                End User Responsibility: The @InfoSec Admin uses @CIS L2 For AWS conformance packs in @AWS Config to check secure configurations in the @GovCloud (US-West) Region. Alerts are collated in @SentinelOne and resolved by the @DevOps Admin based on severity defined in the @Change Management Process.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: '"Paramify uses AWS Config for configuration monitoring. There is a bash script to get configuration recorder status, get details about configuration recorders, and get delivery channel configuration. This will identify whether recording is enabled and whether a delivery channel is configured. Recording is set to a continuous frequency and reflects a recording status as true. It is set to write to an Amazon S3 bucket. GovCloud infrastructure is deployed via Terraform scripts that are maintained in GitLab. Terraform state files which were provided in JSON indicate that infrastructure is being managed as code in a centralized manner."'
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: AWS Config Monitoring
                  description: Script for AWS Config validation
                  instructions: "Check AWS Config setup - Get configuration recorder status `aws configservice describe-configuration-recorder-status` - View configuration recorder details `aws configservice describe-configuration-recorders` - Check delivery channel configuration `aws configservice describe-delivery-channels` Output: Creates JSON file(s)"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/aws_config_monitoring.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Aws Config Monitoring
                      reference: aws_config_monitoring.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Aws Config Monitoring
                      reference: aws_config_monitoring.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: Gov-Prod Terraform Repository (in GitLab)
                  description: The evidence includes Terraform code for GovCloud infrastructure on GitLab with a URL to the repository, a PNG of the file structure and commit history, and a ZIP of the full repository.
                  instructions: Access the GitLab repository using the provided URL (https://gitlab.com/paramify/govcloud-infrastructure-in-terraform) to review the Terraform code and configuration files online. Review the PNG image to verify the repository structure, file names, last commit details, and update history as of June 30, 2025. Extract and analyze the ZIP file to examine the complete set of Terraform files, including provider configurations, variable files, and service definitions, ensuring consistency with the online repository. Validate with Terraform TF State files
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: GitLab Terraform code for GovCloud infra
                      reference: Screenshot 2025-06-30 at 4.58.40 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Untitled Artifact
                      reference: https://gitlab.com/paramify/govcloud-infrastructure-in-terraform
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Govcloud Infrastructure In Terraform Main
                      reference: govcloud-infrastructure-in-terraform-main.zip
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: "Paramify EKS Infra Terraform Script "
                  description: "Paramify EKS Infra Terraform Script "
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Aws Paramify EKS Infra
                      reference: aws-paramify-eks-infra.tf
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: Terraform State files
                  description: The gov-pre and gov-prod tf state files are Terraform state files used to manage the infrastructure configurations for the pre-production (gov-pre) and production (gov-prod) environments of the GovCloud infrastructure. These files track the current state of resources, including provider settings, service configurations, and variable definitions, ensuring consistent deployment and management across environments.
                  instructions: TF (Terraform) state files are stored in paramify-terraform-state S3 bucket and can be exported from S3 or via terraform CLI.
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: gov-prod tf state
                      reference: tfstate.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: gov-pre tf state
                      reference: tfstate (1).json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
          - validation:
              shortName: SVC-05
              description: Enforce system and information resource integrity through cryptographic means
              implementation:
              - >
                Title: Approved Software Enforcement

                Content: Paramify only allows approved software in the Paramify Cloud environment. All software must receive approval from the @Change Control Board through the @Change Management Process. Approved Software must pass an integrity check as part of the deployment. Infrastructure services are deployed via @Terraform, and applications are deployed with @EKS using @Helm.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Paramify manages infrastructure as code through Terraform. Infrastructure runs on Kubernetes clusters which uses Helm charts as packages to support the application. Paramify provided evidence of the Terraform script used to setup the Paramify application. Paramify pulls from Amazon Elastic Container Registry (Amazon ECR) for deployment. Development happens in Amazon US East/West and when a new container deployment is ready it is pushed into that Amazon ECR which is the source of truth for the Amazon GovCloud environment.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Gov-Prod Terraform Repository (in GitLab)
                  description: The evidence includes Terraform code for GovCloud infrastructure on GitLab with a URL to the repository, a PNG of the file structure and commit history, and a ZIP of the full repository.
                  instructions: Access the GitLab repository using the provided URL (https://gitlab.com/paramify/govcloud-infrastructure-in-terraform) to review the Terraform code and configuration files online. Review the PNG image to verify the repository structure, file names, last commit details, and update history as of June 30, 2025. Extract and analyze the ZIP file to examine the complete set of Terraform files, including provider configurations, variable files, and service definitions, ensuring consistency with the online repository. Validate with Terraform TF State files
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: GitLab Terraform code for GovCloud infra
                      reference: Screenshot 2025-06-30 at 4.58.40 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Untitled Artifact
                      reference: https://gitlab.com/paramify/govcloud-infrastructure-in-terraform
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Govcloud Infrastructure In Terraform Main
                      reference: govcloud-infrastructure-in-terraform-main.zip
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: Terraform State files
                  description: The gov-pre and gov-prod tf state files are Terraform state files used to manage the infrastructure configurations for the pre-production (gov-pre) and production (gov-prod) environments of the GovCloud infrastructure. These files track the current state of resources, including provider settings, service configurations, and variable definitions, ensuring consistent deployment and management across environments.
                  instructions: TF (Terraform) state files are stored in paramify-terraform-state S3 bucket and can be exported from S3 or via terraform CLI.
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: gov-prod tf state
                      reference: tfstate.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: gov-pre tf state
                      reference: tfstate (1).json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
              - evidence:
                  name: Change Management GitLab (CloudOps Self-hosted)
                  description: Change Management GitLab (CloudOps Self-hosted)
                  instructions: "🔒 Change Management GitLab (Self-Hosted in Boundary) Paramify maintains a self-hosted GitLab instance dedicated to Change Management, isolated within the AWS GovCloud FedRAMP boundary to ensure controlled access and traceability. This GitLab tracks and manages all version upgrades, infrastructure changes, and security patching activities, such as: Upgrading Amazon EKS clusters Updating SentinelOne agents Modifying WAF rules Creating or rotating Okta API tokens Each Change Request is submitted as a merge request, following a structured template to ensure review consistency and audit readiness. 🔗 Current Change Requests: Log in to https://gitlab.paramify.com/cloudops/change-management/-/merge_requests to view active and historical change requests. A machine-readable Change Management Merge Requests XML Feed is also available for programmatic access or audit ingestion. 🔐 Access Control Access to the Change Management GitLab is tightly restricted: AWS VPN connection required Okta authentication with Yubikey MFA Only CloudOps team members explicitly approved for GitLab access are granted permissions This ensures segregation of duties, strong identity verification, and controlled change authorization. Change Request Ticket Fields Each ticket (merge request) includes the following standardized fields: Field Description Title & Summary Short description of the change (e.g., “Upgrade SentinelOne Agent”) Scope Affected systems: Helm deployments, Terraform code, or manual steps Impact Rating Risk classification: C1 (High) to C4 (No/Low Impact) Requested Changes Technical rationale and proposed action Impact & Security Analysis Review of risk exposure and mitigations Schedule Planned date/time for implementation Deployment & Rollback Plan Precise steps to apply and undo the change, if needed Results Outcome: successful, failed, or rescheduled Approval Workflow (CCB Process) Merge requests are blocked until explicitly approved by a member of the Change Control Board (CCB) After CCB approval, changes are deployed and verified, and the merge request is then closed to complete the workflow This process ensures:Traceability from detection to resolution Accountability for deferred patching and production changes Auditability across infrastructure and application changes 🔍 Example: SVG Upload WAF Rule Change Title: Update WAF rules to allow SVG file uploads Scope: Other (manual changes) Impact: C3 – Low Impact/Risk, requires manual WAF rule update Security Analysis: Adds MIME-type exception for SVG, constrained via custom AWS WAF rule Schedule: 06/20/2025 @ 3PM Deployment Steps: Modify AWSManagedRulesCommonRuleSet + Add custom override rule Approval: ✅ CCB Approved Result: ✅ Change completed successfully 📌 Summary This Change Management system provides: A formal and structured process for approving all changes to code, configuration, and infrastructure Controlled access, limited to CloudOps personnel with Okta/Yubikey and VPN Full audit trails for compliance with FedRAMP, CMMC, SOC 2, and internal governance standards"
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: "Merge Requests list URL "
                      reference: https://gitlab.paramify.com/cloudops/change-management/-/merge_requests/?sort=created_date&state=all&first_page_size=20
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Merge Requests List
                      reference: Merge Requests list.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Git Lab
                      reference: Change Management GitLab.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Example Change Request Create Okta API Token (New User And Token) (!48) · Merge Requests · Paramify Cloud Ops Change Management · Git Lab
                      reference: Example Change Request - Create Okta API Token (new user and token) (!48) · Merge requests · Paramify CloudOps _ Change Management · GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Merge Requests (XML)
                      reference: change_management_merge_requests.xml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: "Paramify EKS Infra Terraform Script "
                  description: "Paramify EKS Infra Terraform Script "
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Aws Paramify EKS Infra
                      reference: aws-paramify-eks-infra.tf
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: Paramify Change Management Process
                  description: The Paramify Change Management Process governs all changes to infrastructure and applications within the Paramify platform. Utilizing Infrastructure as Code (IaC), Paramify automates the build of the entire platform from an approved state, minimizing nonstandard changes to enhance security resilience and overall functionality. All changes are managed through the CloudOps Hosted GitLab (GitLab).
                  instructions: "Paramify's Change Management Process governs all changes to the company's infrastructure and applications. The process leverages Infrastructure as Code (IaC) and manages all changes through CloudOps Hosted GitLab. Key aspects of the process include: Change Types: Five distinct types of changes are supported:Infrastructure Change: Modifications to foundational platform components (e.g., AWS VPC, S3, security tools), managed with Terraform. Application Change: Modifications to non-internal applications (e.g., Production GitLab, SentinelOne Agent), managed with Helm Charts. Release Change: Deployment of new Paramify platform software releases, managed with Helm. Nonstandard Change: One-off, non-automated modifications requiring detailed change requests. Emergency Change: Urgent issues impacting data confidentiality, integrity, or availability, which bypass the standard process but require retroactive approval. Change Control Board (CCB): This board reviews and approves all proposed changes, ensuring alignment with security and operational standards. It consists of the Head of DevOps, Head of IT, and CISO/ISSO or their delegates, with a minimum of two representatives required for meetings. The CCB meets weekly. Change Tickets: Every change must be documented in a GitLab Change Ticket, which includes sections for scope, impact level, description, business justification, steps required, rollback plan, CCB approval, and DevOps confirmation. Tools and Components: The process utilizes Terraform for infrastructure, Helm Charts for application and release deployments, GitLab for version control and change tickets, Jira for release tickets, and Slack for emergency change notifications."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Change Management Process
                      reference: Paramify Change Management Process.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
          - validation:
              shortName: SVC-06
              description: Use automated key management systems to manage, protect, and regularly rotate digital keys and certificates
              implementation:
              - >
                Title: Cryptographic Key Management: Amazon Key Management Service (KMS)

                Content: Paramify Cloud leverages @AWS KMS to manage keys, a FedRAMP 20x-compliant and NIST FIPS 140-2 validated component. 


                End User Responsibility: The @DevOps Admin configures @AWS KMS to automatically rotate cryptographic keys within Paramify Cloud using @Amazon Server-Side Encryption. If keys cannot be rotated automatically they are tracked in @GitLab and rotated manually once a year. The @InfoSec Admin ensures FIPS validated cryptographic modules are correctly configured and modified or replaced when changes impact them.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Paramify runs bash scripts which are used to check AWS Config rules for AWS Key Management Service (AWS KMS) key rotation, get all AWS KMS keys, and details for each AWS KMS key. Output shows that there is 92% (12 out of 13) of keys with rotation enabled.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: KMS Key Rotation
                  description: Script for AWS KMS Key Rotation Validation
                  instructions: '1. Check AWS Config rule for KMS key rotation `aws configservice describe-compliance-by-config-rule --config-rule-name "cmk-backing-key-rotation-enabled-conformance-pack-j3wepwlkw"` 2. Get all KMS keys `aws kms list-keys` 3. For each KMS key, get: - Key details `aws kms describe-key` - Key rotation status `aws kms get-key-rotation-status` - Key policy `aws kms get-key-policy` Output: Creates JSON report with KMS key rotation status'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/kms_key_rotation.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Kms Key Rotation
                      reference: kms_key_rotation.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Kms Key Rotation
                      reference: kms_key_rotation.json
                      outputResults: ""
                      effectiveDate: 2025-07-08T00:00:00.000Z
              - evidence:
                  name: KMS Key Rotation
                  description: Script for AWS KMS Key Rotation Validation
                  instructions: '1. Check AWS Config rule for KMS key rotation `aws configservice describe-compliance-by-config-rule --config-rule-name "cmk-backing-key-rotation-enabled-conformance-pack-j3wepwlkw"` 2. Get all KMS keys `aws kms list-keys` 3. For each KMS key, get: - Key details `aws kms describe-key` - Key rotation status `aws kms get-key-rotation-status` - Key policy `aws kms get-key-policy` Output: Creates JSON report with KMS key rotation status'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/kms_key_rotation.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Kms Key Rotation
                      reference: kms_key_rotation.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Kms Key Rotation
                      reference: kms_key_rotation.json
                      outputResults: ""
                      effectiveDate: 2025-07-08T00:00:00.000Z
          - validation:
              shortName: SVC-07
              description: Use a consistent, risk-informed approach for applying security patches
              implementation:
              - >
                Title: Change Control Board

                Content: Paramify oversees and approves changes to Paramify Cloud through a controlled @Change Management Process, led by the @Change Control Board.
              - >
                Title: Patch Management

                Content: Automated patching of Paramify Cloud infrastructure is configured by the @DevOps Admin. Patches are prioritized and deployed following a security assessment and approval by the @Change Control Board according to the FedRAMP Vulnerability Management standards. 
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify has a process for approving patches, there is use of tickets that are created in the self-hosted GitLab. A merge request is then worked to apply the security patch to the environment. Grype is used as a static analysis tool to identify vulnerabilities that would then need to be worked by Paramify. There is a documented change management process which involves creating anew merge request with any Terraform and Helm configurations as part of a proposed change. There is a change control board which meets weekly. Merge requests must be approved.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Paramify Change Management Process
                  description: The Paramify Change Management Process governs all changes to infrastructure and applications within the Paramify platform. Utilizing Infrastructure as Code (IaC), Paramify automates the build of the entire platform from an approved state, minimizing nonstandard changes to enhance security resilience and overall functionality. All changes are managed through the CloudOps Hosted GitLab (GitLab).
                  instructions: "Paramify's Change Management Process governs all changes to the company's infrastructure and applications. The process leverages Infrastructure as Code (IaC) and manages all changes through CloudOps Hosted GitLab. Key aspects of the process include: Change Types: Five distinct types of changes are supported:Infrastructure Change: Modifications to foundational platform components (e.g., AWS VPC, S3, security tools), managed with Terraform. Application Change: Modifications to non-internal applications (e.g., Production GitLab, SentinelOne Agent), managed with Helm Charts. Release Change: Deployment of new Paramify platform software releases, managed with Helm. Nonstandard Change: One-off, non-automated modifications requiring detailed change requests. Emergency Change: Urgent issues impacting data confidentiality, integrity, or availability, which bypass the standard process but require retroactive approval. Change Control Board (CCB): This board reviews and approves all proposed changes, ensuring alignment with security and operational standards. It consists of the Head of DevOps, Head of IT, and CISO/ISSO or their delegates, with a minimum of two representatives required for meetings. The CCB meets weekly. Change Tickets: Every change must be documented in a GitLab Change Ticket, which includes sections for scope, impact level, description, business justification, steps required, rollback plan, CCB approval, and DevOps confirmation. Tools and Components: The process utilizes Terraform for infrastructure, Helm Charts for application and release deployments, GitLab for version control and change tickets, Jira for release tickets, and Slack for emergency change notifications."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Change Management Process
                      reference: Paramify Change Management Process.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
              - evidence:
                  name: Change Management GitLab (CloudOps Self-hosted)
                  description: Change Management GitLab (CloudOps Self-hosted)
                  instructions: "🔒 Change Management GitLab (Self-Hosted in Boundary) Paramify maintains a self-hosted GitLab instance dedicated to Change Management, isolated within the AWS GovCloud FedRAMP boundary to ensure controlled access and traceability. This GitLab tracks and manages all version upgrades, infrastructure changes, and security patching activities, such as: Upgrading Amazon EKS clusters Updating SentinelOne agents Modifying WAF rules Creating or rotating Okta API tokens Each Change Request is submitted as a merge request, following a structured template to ensure review consistency and audit readiness. 🔗 Current Change Requests: Log in to https://gitlab.paramify.com/cloudops/change-management/-/merge_requests to view active and historical change requests. A machine-readable Change Management Merge Requests XML Feed is also available for programmatic access or audit ingestion. 🔐 Access Control Access to the Change Management GitLab is tightly restricted: AWS VPN connection required Okta authentication with Yubikey MFA Only CloudOps team members explicitly approved for GitLab access are granted permissions This ensures segregation of duties, strong identity verification, and controlled change authorization. Change Request Ticket Fields Each ticket (merge request) includes the following standardized fields: Field Description Title & Summary Short description of the change (e.g., “Upgrade SentinelOne Agent”) Scope Affected systems: Helm deployments, Terraform code, or manual steps Impact Rating Risk classification: C1 (High) to C4 (No/Low Impact) Requested Changes Technical rationale and proposed action Impact & Security Analysis Review of risk exposure and mitigations Schedule Planned date/time for implementation Deployment & Rollback Plan Precise steps to apply and undo the change, if needed Results Outcome: successful, failed, or rescheduled Approval Workflow (CCB Process) Merge requests are blocked until explicitly approved by a member of the Change Control Board (CCB) After CCB approval, changes are deployed and verified, and the merge request is then closed to complete the workflow This process ensures:Traceability from detection to resolution Accountability for deferred patching and production changes Auditability across infrastructure and application changes 🔍 Example: SVG Upload WAF Rule Change Title: Update WAF rules to allow SVG file uploads Scope: Other (manual changes) Impact: C3 – Low Impact/Risk, requires manual WAF rule update Security Analysis: Adds MIME-type exception for SVG, constrained via custom AWS WAF rule Schedule: 06/20/2025 @ 3PM Deployment Steps: Modify AWSManagedRulesCommonRuleSet + Add custom override rule Approval: ✅ CCB Approved Result: ✅ Change completed successfully 📌 Summary This Change Management system provides: A formal and structured process for approving all changes to code, configuration, and infrastructure Controlled access, limited to CloudOps personnel with Okta/Yubikey and VPN Full audit trails for compliance with FedRAMP, CMMC, SOC 2, and internal governance standards"
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: "Merge Requests list URL "
                      reference: https://gitlab.paramify.com/cloudops/change-management/-/merge_requests/?sort=created_date&state=all&first_page_size=20
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Merge Requests List
                      reference: Merge Requests list.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Git Lab
                      reference: Change Management GitLab.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Example Change Request Create Okta API Token (New User And Token) (!48) · Merge Requests · Paramify Cloud Ops Change Management · Git Lab
                      reference: Example Change Request - Create Okta API Token (new user and token) (!48) · Merge requests · Paramify CloudOps _ Change Management · GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Merge Requests (XML)
                      reference: change_management_merge_requests.xml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: Paramify CI/CD Pipeline (with scan example)
                  description: >-
                    Paramify CI/CD Pipeline with scans example. See Instructions for detailed explanation of the security components involved in the pipeline.


                    Complete YAML of GitLab pipeline is provided with visualization of steps and example screenshots showing what the process looks like from the DevOps side.
                  instructions: "Paramify CI/CD Pipeline with security scans Paramify's GitLab CI/CD pipeline includes multiple layers of security and change management to ensure software artifacts are secure, policy-compliant, and auditable at every stage of delivery. 1. Hardened Base Images All container images are built using Wolfi base images from Chainguard: image: name: cgr.dev/chainguard/node:22@sha256:... These distroless, minimal images are curated to include zero or minimal known CVEs, significantly reducing the baseline attack surface. 2. Mandatory Security Scanning Security scans are integrated directly into the CI pipeline to enforce vulnerability thresholds before deployment or merging. Static Code Analysis (SAST):Uses Semgrep to detect common coding vulnerabilities: test_sast: image: semgrep/semgrep:latest script: - semgrep ci --config auto npm Dependency Auditing:npm audit checks for vulnerable third-party packages: script: - npm audit --audit-level high - npm audit signatures Container Vulnerability Scanning:Uses Grype with a customized GRYPE_CONFIG to filter false positives while enforcing a --fail-on medium policy: script: - grype --fail-on medium --config ~/grype.yaml \"${ECR_URL}/paramify:${CI_COMMIT_SHORT_SHA}\" Scanning is enforced during the test stage before deployment, ensuring insecure builds do not reach production. 3. Secure Build and Deployment Controls Builds are executed using Kaniko: image: gcr.io/kaniko-project/executor:v1.23.2-debug script: - /kaniko/executor --context=... --destination=... Applications are deployed to Kubernetes via kubectl only on merge to main: deploy_eks: rules: - if: $CI_COMMIT_BRANCH == \"main\" A review environment is spun up dynamically for merge requests and is manually stoppable: deploy_review: environment: name: review/$CI_MERGE_REQUEST_IID-$CI_COMMIT_REF_SLUG url: https://$CI_MERGE_REQUEST_IID.dev.paramify.com Images cannot be pushed to ECR unless they pass all prior vulnerability scans and build stages. 4. Vulnerability Exception and Change Control Process If vulnerabilities are discovered that cannot be immediately remediated (e.g., in upstream npm packages or OS dependencies), a ticket is created in the CloudOps Change Management GitLab, which is:Self-hosted within AWS GovCloud FedRAMP boundary for controlled access. Used to track, review, and approve exceptions and mitigation steps. This ensures:Accountability for deferred patching. Auditability of all risk decisions. Traceability from detection to resolution. Summary This pipeline enforces a “no deploy without remediation” policy through automated scanning, minimal and verified base images, and integrated exception management workflows."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Grype Paramify 2024 09 26
                      reference: grype_paramify_2024-09-26.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Update Base Image To 20240930 Middot Merge Requests Middot Paramify Paramify Middot Git Lab
                      reference: Update base image to 20240930 (50) middot Merge requests middot Paramify _ paramify middot GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: CI/CD pipeline visualization
                      reference: Screenshot 2025-06-30 at 5.07.32 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: CI/CD Pipeline (machine-readable code)
                      reference: ci-cd-pipeline.yaml
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
      - KSI:
          name: Identity and Access Management
          shortName: IAM
          Validations:
          - validation:
              shortName: IAM-01
              description: Enforce multi-factor authentication (MFA) using methods that are difficult to intercept or impersonate (phishing-resistant MFA) for all user authentication
              implementation:
              - >
                Title: Multifactor Authentication: Okta IDaaS

                Content: Authorized users to Paramify Cloud are found within authorized @Okta IDaaS groups, a FedRAMP 20x-compliant component.


                End User Responsibility: The @Identity Management Admin configures Paramify Cloud to require Multi-factor Authentication (MFA) using both @Okta IDaaS and @Yubikey as the second factor for authentication. This applies to all logical access to Paramify Cloud, including privileged sessions and remote access.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify utilizes Okta with multi-factor authentication (MFA) enabled. MFA policy requires that users enroll a Yubikey to gain access. Yubikey requires physical interaction making it phishing-resistant
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Okta Authenticators
                  description: Script for Okta authenticators validation
                  instructions: "1. Pull Okta application list and correlate authentication policies `GET /api/v1/apps` `GET /api/v1/apps/{appId}/policies` 2. Pull Okta authenticator enrollment policy and rules `GET /api/v1/policies?type=AUTHENTICATOR_ENROLLMENT` `GET /api/v1/policies/{policyId}/rules` 3. Run policy simulation to validate phishing resistant MFA `POST /api/v1/policies/simulate` 4. Get FIDO2 authenticator configuration `GET /api/v1/authenticators` Output: Creates JSON with Okta authentication details and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Okta Authenticators script
                      reference: okta_authenticators.sh
                      outputResults: ""
                      effectiveDate: 2025-06-26T00:00:00.000Z
                  - artifact:
                      name: Screenshot 2025-06-30 at 4.42.07 PM.png
                      reference: ""
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Okta Authenticators
                      reference: Screenshot 2025-06-30 at 4.42.07 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Screenshot 2025-06-30 at 4.42.51 PM.png
                      reference: ""
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Okta Auths Policy
                      reference: Screenshot 2025-06-30 at 4.42.51 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Screenshot 2025-06-30 at 4.43.49 PM.png
                      reference: ""
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Okta Password and Yubikey Apps
                      reference: Screenshot 2025-06-30 at 4.43.49 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Okta Password Policy settings
                      reference: Screenshot 2025-06-30 at 4.47.52 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
          - validation:
              shortName: IAM-02
              description: Use secure passwordless methods for user authentication and authorization when feasible, otherwise enforce strong passwords with MFA
              implementation:
              - >
                Title: Password Settings: Okta IDaaS

                Content: Paramify employs @Okta IDaaS, a FedRAMP 20x-compliant component, for access to Paramify Cloud, enforcing password rules through checking against a compromised list, secure transmission, salted key derivation storage, immediate password change on recovery, and user-friendly, complex password policies. All data, including passwords, are AES-256 encrypted as per FIPS 140-2.


                End User Responsibility: The @Identity Management Admin configures @Okta IDaaS authentication settings meet the following complexity requirements:
                 Case sensitive
                 Minimum of 14 characters
                 At least one upper-case letter
                 At least one lower-case letter
                 At least one numeric
                 At least one special character

                 Passwords and authenticators are encrypted in accordance with FIPS 140-2 using AES-256.
              - >
                Title: Multifactor Authentication: Okta IDaaS

                Content: Authorized users to Paramify Cloud are found within authorized @Okta IDaaS groups, a FedRAMP 20x-compliant component.


                End User Responsibility: The @Identity Management Admin configures Paramify Cloud to require Multi-factor Authentication (MFA) using both @Okta IDaaS and @Yubikey as the second factor for authentication. This applies to all logical access to Paramify Cloud, including privileged sessions and remote access.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Yubikey authentication is enforced for MFA through Okta. The use of Okta is captured through Paramify Risk Solutions.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Okta Authenticators
                  description: Script for Okta authenticators validation
                  instructions: "1. Pull Okta application list and correlate authentication policies `GET /api/v1/apps` `GET /api/v1/apps/{appId}/policies` 2. Pull Okta authenticator enrollment policy and rules `GET /api/v1/policies?type=AUTHENTICATOR_ENROLLMENT` `GET /api/v1/policies/{policyId}/rules` 3. Run policy simulation to validate phishing resistant MFA `POST /api/v1/policies/simulate` 4. Get FIDO2 authenticator configuration `GET /api/v1/authenticators` Output: Creates JSON with Okta authentication details and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Okta Authenticators script
                      reference: okta_authenticators.sh
                      outputResults: ""
                      effectiveDate: 2025-06-26T00:00:00.000Z
                  - artifact:
                      name: Screenshot 2025-06-30 at 4.42.07 PM.png
                      reference: ""
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Okta Authenticators
                      reference: Screenshot 2025-06-30 at 4.42.07 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Screenshot 2025-06-30 at 4.42.51 PM.png
                      reference: ""
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Okta Auths Policy
                      reference: Screenshot 2025-06-30 at 4.42.51 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Screenshot 2025-06-30 at 4.43.49 PM.png
                      reference: ""
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Okta Password and Yubikey Apps
                      reference: Screenshot 2025-06-30 at 4.43.49 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Okta Password Policy settings
                      reference: Screenshot 2025-06-30 at 4.47.52 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
          - validation:
              shortName: IAM-03
              description: Enforce appropriately secure authentication methods for non-user accounts and services
              implementation:
              - >
                Title: Not Publicly Accessible

                Content: Access to Paramify Cloud is authorized via web session or API calls only. Paramify doesn't share Paramify Cloud information publicly. Any modifications to configurations or policy affecting the dissemination of information publicly must be approved by the @Change Control Board as part of the @Data Inventory Process.
              - >
                Title: Application Partitioning

                Content: Paramify segregates front-end web servers and customer user functionality from back-end information system resources and administrative functionality. The application includes a consistent security layer that governs all access to the data, by the user or API.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: '"Within AWS IAM SentinelOne is the main non-user machine process that authenticates. SentinelOne grabs log files from Amazon S3 buckets and database logs to pull those out into the SIEM. There are roles and policies that are scoped down to the specific logging buckets that it needs. Paramify provides API integrations for the application. Users can interact with features through the API. Evidence provided covers system ports, protocols, and services, IAM identity center, IAM policies, and SSL server test. API authentication relies on the use of API tokens. These tokens are configured within an expiration time that can be set at 1, 3, 6, and 12 months. REST API documentation indicates that API keys are created to authenticate requests."'
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: IAM Identity Center
                  description: Script for IAM Identity Center validation
                  instructions: "1. Pull Identity Providers from IAM `aws iam list-saml-providers` `aws iam get-saml-provider` `aws iam list-open-id-connect-providers` `aws iam get-open-id-connect-provider` 2. Pull Identity Center Information `aws sso-admin list-instances` `aws sso-admin list-identity-providers` `aws sso-admin list-permission-sets` `aws sso-admin describe-permission-set` Output: Creates JSON with Identity Provider and Identity Center details and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/iam_identity_center.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Iam Identity Center
                      reference: iam_identity_center.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: System Ports, Protocols & Services
                  description: System Ports, Protocols & Services
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: System Ports, Protocols Services
                      reference: System Ports, Protocols & Services.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: IAM Policies
                  description: Script to automate evidence collection of IAM policies
                  instructions: "Script: iam_policies.sh 1. List all IAM policies aws iam list-policies --scope Local --query 'Policies[*].[PolicyName,PolicyId,Arn]' 2. For each policy, get: - Policy details aws iam get-policy - Policy version aws iam get-policy-version - Policy document aws iam get-policy-version (for PolicyVersion.Document) - Attached entities (users, groups, roles) aws iam list-entities-for-policy Output: Creates JSON with IAM policy details and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/iam_policies.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Iam Policies
                      reference: iam_policies.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: Qualys SSL server lab test reports
                  description: Qualys SSL server lab test report for all publicly facing URLs, showing encryption capabilities for data in transit. (e.g., website HTTPS/TLS configurations)  https://www.ssllabs.com/ssltest/
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: proxy.paramify.com SSL Server Test
                      reference: SSL Server Test_ proxy.paramify.com (Powered by Qualys SSL Labs).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: app.paramify.com SSL Server Test
                      reference: SSL Server Test_ app.paramify.com (Powered by Qualys SSL Labs).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: registry.paramify.com SSL Server Test
                      reference: SSL Server Test_ registry.paramify.com (Powered by Qualys SSL Labs).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Paramify API Configuration
                  description: Configuration and examples of how the Paramify API operates
                  instructions: The Paramify API enables authorized users to create API Tokens that are passed as Bearer tokens in the header of HTTP requests. API tokens are scoped to specific permission and have set time expiration to ensure that API tokens do not give unnecessary access to data within the Paramify application. Paramify API documentation is available at https://app.paramify.com/api/documentation/ A JSON of the Paramify REST API is also included as machine-readable configuration evidence.
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: API example
                      reference: Screenshot 2025-07-03 at 3.28.40 PM.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: Paramify REST API Documentation 0 1 0
                      reference: documentation-0.1.0.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: API time expiration
                      reference: Screenshot 2025-07-03 at 3.29.32 PM.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: API Bearer token example
                      reference: Screenshot 2025-07-03 at 3.28.40 PM.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: Untitled Artifact
                      reference: https://app.paramify.com/api/documentation/
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: API key creation example
                      reference: Screenshot 2025-07-03 at 3.30.39 PM.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: "API keys in Paramify app "
                      reference: Screenshot 2025-07-03 at 3.30.53 PM.png
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
          - validation:
              shortName: IAM-04
              description: Use a least-privileged, role and attribute-based, and just-in-time security authorization model for all user and non-user accounts and services
              implementation:
              - >
                Title: Role Permission Enforcement: Amazon Identity and Access Management (IAM)

                Content: Paramify uses @IAM for role permission enforcement.


                End User Responsibility: Paramify provides users with minimal access based on their role, determined by sensitivity level and authorized privileges. User permissions on Paramify Cloud are defined in @IAM, which is tied to group membership information in @Okta IDaaS. Roles ensure separation of duties, protecting against unauthorized access and changes. Administrative access requires permission escalation granted only to specific Paramify employees. Escalations are logged with @Amazon CloudTrail.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Bash scripts are used to list all IAM users, list all IAM groups, and gather details for each user and group. IAM roles are also collected along with the details for each role. IAM policies are pulled in which detail various policies for AWS resources. IAM identity center policies are pulled in which shows Security Assertion Markup Language (SAML) and OpenID Connect (OIDC) authentication protocols in use.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: IAM Roles
                  description: Script for AWS IAM roles validation
                  instructions: "1. List all IAM roles `aws iam list-roles --query 'Roles[*].[RoleName,Arn,CreateDate]'` 2. For each role, get: - Role details `aws iam get-role` - Trust relationships `aws iam get-role (for AssumeRolePolicyDocument)` - Attached policies `aws iam list-attached-role-policies` - Instance profiles `aws iam list-instance-profiles-for-role` - Tags `aws iam list-role-tags` Output: Creates JSON with IAM role details and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Iam Roles
                      reference: iam_roles.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/iam_roles.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
              - evidence:
                  name: IAM Users & Groups
                  description: Script to pull IAM users and groups
                  instructions: "1. List all IAM users `aws iam list-users --query 'Users[*].[UserName,CreateDate,PasswordLastUsed]'` 2. List all IAM groups `aws iam list-groups --query 'Groups[*].[GroupName,CreateDate]'` 3. For each user, get: - User details `aws iam get-user` - Group memberships `aws iam list-groups-for-user` - Access keys `aws iam list-access-keys` - MFA devices `aws iam list-mfa-devices` - Login profile `aws iam get-login-profile` 4. For each group, get: - Group details `aws iam get-group` - Group policies `aws iam list-attached-group-policies` Output: Creates JSON with IAM user/group details and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/iam_users_groups.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Iam Users Groups
                      reference: iam_users_groups.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: IAM Identity Center
                  description: Script for IAM Identity Center validation
                  instructions: "1. Pull Identity Providers from IAM `aws iam list-saml-providers` `aws iam get-saml-provider` `aws iam list-open-id-connect-providers` `aws iam get-open-id-connect-provider` 2. Pull Identity Center Information `aws sso-admin list-instances` `aws sso-admin list-identity-providers` `aws sso-admin list-permission-sets` `aws sso-admin describe-permission-set` Output: Creates JSON with Identity Provider and Identity Center details and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/iam_identity_center.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Iam Identity Center
                      reference: iam_identity_center.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: IAM Policies
                  description: Script to automate evidence collection of IAM policies
                  instructions: "Script: iam_policies.sh 1. List all IAM policies aws iam list-policies --scope Local --query 'Policies[*].[PolicyName,PolicyId,Arn]' 2. For each policy, get: - Policy details aws iam get-policy - Policy version aws iam get-policy-version - Policy document aws iam get-policy-version (for PolicyVersion.Document) - Attached entities (users, groups, roles) aws iam list-entities-for-policy Output: Creates JSON with IAM policy details and writes to CSV"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/iam_policies.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Iam Policies
                      reference: iam_policies.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
          - validation:
              shortName: IAM-05
              description: Apply zero trust design principles
              implementation:
              - >
                Title: IAM-05

                Content: Paramify Cloud is architected to zero trust design principles including limited role-based-access, no long term credentials, and least privilege. 
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: "\"Bash scripts are used to examine pod security contexts and configurations, examine pod policies and validation configurations, check pod security patches, check network policies, check for default deny network policies across namespaces, verify VPC CNI plugin configuration for network policy enforcement, examine security group policies for pods, check worker node security group configurations, and verify pod resource limits and isolation. Paramify provided script output for kubectl which manages Kubernetes clusters. This allows for hardening actions to take place such as setting multiple areas of \"\"allowPrivilegeEscalation\"\" to false and tagging specific functions as 'privileged' to limit access. The script output provides information on the least privilege summary.\""
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: EKS Microservice Segmentation (kubectl)
                  description: Script for kubectl EKS Microservice segmentation validation
                  instructions: "1. Check for default deny network policies across namespaces kubectl get networkpolicies -A -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\t\"}{.spec.policyTypes}{\"\\n\"}{end}' 2. Verify VPC CNI plugin configuration for network policy enforcement kubectl describe daemonset aws-node -n kube-system | grep ENABLE_NETWORK_POLICY kubectl describe daemonset aws-node -n kube-system | grep amazon-vpc-cni: 3. Examine security group policies for pods kubectl get securitygrouppolicies.vpcresources.k8s.aws -A -o yaml 4. Check worker node security group configurations `aws ec2 describe-instances --filters \"Name=tag:kubernetes.io/cluster/<CLUSTER_NAME>,Values=owned\"` `aws ec2 describe-instances --instance-ids <INSTANCE_ID> --query \"Reservations[*].Instances[*].SecurityGroups\"` 5. Verify pod resource limits and isolation kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\t\"}{.spec.containers[*].resources}{\"\\n\"}{end}' Output: Creates JSON report with microservice segmentation status and CSV metrics"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/eks_microservice_segmentation.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: EKS Microservice Segmentation JSON
                      reference: eks_microservice_segmentation.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
              - evidence:
                  name: Kubectl Security script
                  description: Script for EKS Kubernetes Security Configuration Validation
                  instructions: "1. Examine pod security contexts and configurations kubectl get pods -A -o jsonpath=.... 2. Examine pod policies and validation configurations kubectl get validatingwebhookconfigurations -A -o yaml 3. Check pod security policies kubectl get psp -o yaml 4. Check network policies kubectl get networkpolicies -A -o yaml Output: Creates JSON report with Kubernetes security configuration status"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/kubectl_security.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Kubectl Security JSON
                      reference: kubectl_security.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
              - evidence:
                  name: EKS Least Privilege
                  description: Script for AWS EKS Least Privilege and Security Configuration Validation
                  instructions: "1. Check cluster's pod security standards and logging configuration `aws eks describe-cluster --name [cluster-name] --query \"cluster.logging\"` 2. Review IAM roles associated with pods `aws eks list-pod-identity-associations --cluster-name [cluster-name]` 3. Check existing EKS add-ons `aws eks list-addons --cluster-name [cluster-name]` Output: Creates JSON report with EKS security configuration status"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/eks_least_privilege.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Eks Least Privilege
                      reference: eks_least_privilege.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: Kubectl Hardening script
                  description: Kubectl hardening script
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Harden
                      reference: harden.txt
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
          - validation:
              shortName: IAM-06
              description: Automatically disable or otherwise secure accounts with privileged access in response to suspicious activity
              implementation:
              - >
                Title: IAM-04

                Content: @SentinelOne monitors audit logs from @Okta IDaaS and @Amazon CloudTrail to automatically identify suspicious activity. When suspicious activity is detected, @SentinelOne automatically creates an incident, can disable the involved account in @Okta and sends an alert to the @InfoSec Admin via @Slack.


                End User Responsibility: @InfoSec Admin configures audit logs from @Okta IDaaS and @Amazon CloudTrail to be monitored in @SentinelOne and responds to alerts of suspicious activity by marking alerts as true positive or false positive. If alerts are marked false positive, the privileged access account is reenabled. If alerts are marked as true positive the @Incident Response Process occurs. 
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: Partial
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify provided evidence of slack integrations with SentinelOne alerting, evidence of custom rules in SentinelOne, evidence of log analysis in the Singularity Data Lake, and evidence of alert that are configured in SentinelOne via Star Custom Rules. Paramify gets the alert in SentinelOne and then must perform account securing actions where needed. This involves analysis of the alert and then taking the necessary action.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: SIEM and Audit activity alerts
                  description: >-
                    This evidence demonstrates how Paramify monitors and responds to critical security events using SentinelOne SIEM and Slack integrations. Evidence includes:


                    - AWS Root Login Alerts – detection and alerting on root account logins.

                    - Audit Log Queries – validation that audit activity is logged and searchable in SentinelOne Data Lake.

                    - Audit Log Stops Alert – alerting when audit logs stop flowing.

                    - All SIEM Alerts – list of configured alerts in SentinelOne, including Star Custom Rules.

                    - Slack Alerting – integration showing alerts forwarded to Paramify’s Slack for real-time visibility.
                  instructions: Log in to SentinelOne Console. Run queries in the Singularity Data Lake for root logins and audit log activity. Navigate to SIEM Alerts / Star Custom Rules to view configured alerts. Review alert history to confirm AWS root login and audit log stop alerts are generated. Capture Slack integration evidence by showing SentinelOne alerts forwarded to Slack.
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: AWS Root Login Alert
                      reference: AWS Root login Alert  (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Audit Log Query In S1 SIEM
                      reference: Audit Log query in S1 SIEM (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: AWS Root Login Query In S1 SIEM
                      reference: AWS Root login query in S1 SIEM (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Audit Log Stops Alert
                      reference: Audit Log Stops Alert (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: All S1 SIEM Alerts
                      reference: All S1 SIEM Alerts (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Paramify Sentinelone Slack Alerts New
                      reference: paramify-sentinelone-slack-alerts-new.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
      - KSI:
          name: Monitoring, Logging, and Auditing
          shortName: MLA
          Validations:
          - validation:
              shortName: MLA-01
              description: Operate a Security Information and Event Management (SIEM) or similar system(s) for centralized, tamper-resistent logging of events, activities, and changes
              implementation:
              - >
                Title: Centralized Security Event Correlation: SentinelOne

                Content: Paramify uses @SentinelOne, a FedRAMP 20x-compliant component, for Security Information and Event Management (SIEM).


                End User Responsibility: The @InfoSec Admin configures @SentinelOne to correlate security events from multiple sources within Paramify Cloud, enabling real-time and post-event investigations.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify provided evidence of SentinelOne usage and evidence of log data in the Singularity Data Lake. Singularity aggregates log information and functions as the SIEM to allow for the review of events, activities, and changes.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: SentinelOne SIEM Configuration
                  description: >-
                    This evidence demonstrates how Paramify configures and uses SentinelOne as its Security Information and Event Management (SIEM) platform. SentinelOne’s Singularity Data Lake (SDL) aggregates log information to enable centralized review of events, activities, and changes. Evidence includes:


                    SIEM S1 SDL Monitors – validation that monitors are configured in SentinelOne.


                    Singularity Data Lake Screenshot – confirmation that log data is being collected and available for review.
                  instructions: "Log in to SentinelOne Console. Navigate to Singularity Data Lake to view active monitors and verify log collection. View monitors and data entries showing SIEM activity. Export or document configuration details from the SIEM settings to confirm centralization of log data (eg: monitor configuration JSON file)"
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: SIEM SentinelOne SDL URL
                      reference: https://paramify.okta-gov.com/home/paramify_sentinelonegov_1/0oatd4sswPaukgPyY0j6/alntd6fpsi2CbAab00j6
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: SIEM S1 SDL Monitors
                      reference: SIEM-S1-SDL-monitors.json
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: SIEM Singularity Data Lake Screenshot
                      reference: SIEM - Singularity Data Lake screenshot.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
          - validation:
              shortName: MLA-02
              description: Regularly review and audit logs
              implementation:
              - >
                Title: Audit Log Collection and Alerts: Amazon CloudTrail

                Content: Paramify Cloud uses @Amazon CloudTrail, a FedRAMP 20x-compliant component that enables robust audit log backup.


                End User Responsibility: The @IT Admin configures @Amazon CloudTrail which records audit logs for all system components. Logs are automatically analyzed by @GuardDuty. Alerts for atypical account usage are triggered automatically in @SentinelOne and reviewed and resolved by the @InfoSec Admin.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Evidence for this KSI includes audit record retention configurations and SIEM and Audit activity alerts. For audit record retention CloudTrail is used to write log data and record API activity to the Singularity Data Lake which functions as the SIEM. There are automated alerts that configured through custom rules that allow for the Paramify team to perform audit and review activities.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Audit record retention configurations
                  description: |-
                    Sentinel One is configured to retain Audit Logs for up to 365 days in searchable storage and there is no current requirement from an Agency to align with M-21-31 storage requirements.

                    1) For the audit logs that are fully under CSP control, provide evidence that they are retained online for at least 90 days and offline for at least a year. 
                    2) For the audit logs that have a Federal customer responsibility, provide evidence that they are retained for a time period in accordance with M-21-31   
                    Reference:  M-21-31 - https://www.whitehouse.gov/wp-content/uploads/2021/08/M-21-31-Improving-the-Federal-Governments-Investigative-and-Remediation-Capabilities-Related-to-Cybersecurity-Incidents.pdf
                  instructions: Sentinel One is configured to retain Audit Logs for up to 365 days in searchable storage and there is no current requirement from an Agency to align with M-21-31 storage requirements.
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Cloudtrail Management Events
                      reference: cloudtrail_management_events (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Audit Logs 1
                      reference: audit_logs_1 (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Audit Logs 3
                      reference: audit_logs_3 (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Audit Logs 2
                      reference: audit_logs_2 (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Audit Logs 4
                      reference: audit_logs_4 (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: SIEM and Audit activity alerts
                  description: >-
                    This evidence demonstrates how Paramify monitors and responds to critical security events using SentinelOne SIEM and Slack integrations. Evidence includes:


                    - AWS Root Login Alerts – detection and alerting on root account logins.

                    - Audit Log Queries – validation that audit activity is logged and searchable in SentinelOne Data Lake.

                    - Audit Log Stops Alert – alerting when audit logs stop flowing.

                    - All SIEM Alerts – list of configured alerts in SentinelOne, including Star Custom Rules.

                    - Slack Alerting – integration showing alerts forwarded to Paramify’s Slack for real-time visibility.
                  instructions: Log in to SentinelOne Console. Run queries in the Singularity Data Lake for root logins and audit log activity. Navigate to SIEM Alerts / Star Custom Rules to view configured alerts. Review alert history to confirm AWS root login and audit log stop alerts are generated. Capture Slack integration evidence by showing SentinelOne alerts forwarded to Slack.
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: AWS Root Login Alert
                      reference: AWS Root login Alert  (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Audit Log Query In S1 SIEM
                      reference: Audit Log query in S1 SIEM (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: AWS Root Login Query In S1 SIEM
                      reference: AWS Root login query in S1 SIEM (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Audit Log Stops Alert
                      reference: Audit Log Stops Alert (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: All S1 SIEM Alerts
                      reference: All S1 SIEM Alerts (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Paramify Sentinelone Slack Alerts New
                      reference: paramify-sentinelone-slack-alerts-new.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Guard Duty
                  description: Script for AWS GuardDuty validation
                  instructions: "Check GuardDuty setup - List detector IDs `aws guardduty list-detectors` - Get detector configuration details `aws guardduty get-detector --detector-id <detector-id>` Output: Creates unique JSON file and appends to directory-based monitoring files"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/guard_duty.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Guard Duty
                      reference: guard_duty.json
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
          - validation:
              shortName: MLA-03
              description: Rapidly detect and remediate or mitigate vulnerabilities
              implementation:
              - >
                Title: Supply Chain Risk Management Plan

                Content: The @Vendor Risk Management Admin implements and updates the @Supply Chain Risk Management Plan for Paramify Cloud annually, or when receiving relevant cyber threat information or in response to a cyber incident.
              - >
                Title: Incident Identification

                Content: Paramify personnel report suspected or actual security incidents to the @Incident Response Admin. Paramify also detects potential incidents from sources, including:

                @SentinelOne

                @Nessus Vulnerability Scans

                US-CERT

                Vendor bulletins and reports


                @Security Operations Center Admin flags events for the @Incident Response Admin to review. The @Incident Response Admin creates an incident in @SentinelOne after confirming the event is a security incident. The @Incident Response Admin analyzes and remediates the incident, documenting each step in the @SentinelOne until it is resolved.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify has a built in Trend Analysis platform that leverages data various sources to track issue status, open risks, and scan targets.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Trend Analysis Paramify Issues
                  description: ""
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Trend Analysis Dashboard
                      reference: https://app.paramify.com/programs/4678075a-9949-4f56-9bf1-7c45eb955f97/trend-analysis?rl=low&rl=moderate&rl=high&rl=critical&it=vulnerability&it=configuration
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
          - validation:
              shortName: MLA-04
              description: Perform authenticated vulnerability scanning on information resources
              implementation:
              - >
                Title: Application Vulnerability Scans: Nessus Pro

                Content: Paramify uses @Nessus for authenticated web app vulnerability testing at least monthly and prior to new deployments. The @DevOps Admin reviews reports and tracks confirmed vulnerabilities for remediation in @Linear.
              - >
                Title: Container Vulnerability Scans: SentinelOne Endpoint

                Content: Paramify uses @SentinelOne Endpoint for container vulnerability testing. The @SentinelOne Endpoint runs as an agent with privileged access to the @Paramify Cloud @EKS runtime containers. The @DevOps Admin reviews reports and tracks confirmed vulnerabilities for remediation in @GitLab.
              - >
                Title: Infrastructure Vulnerability Scans: Nessus Pro

                Content: The @InfoSec Admin uses @Nessus and @AWS Config to assess Paramify Cloud for vulnerabilities and deviations from baseline standards on an ongoing basis. Results are tracked in @GitLab.
              - >
                Title: Vulnerability Assessments

                Content: Paramify contracts with a FedRAMP 20x-accredited @Red Team for annual vulnerability scanning and penetration testing of the Paramify Cloud environment.

                Monthly authenticated vulnerability scanning is performed by Paramify for:

                Servers: @Nessus

                Containers: @SentinelOne Endpoint

                Databases: @Nessus

                Web: @Nessus


                The POA&M document is updated monthly with remediation activities for any high, moderate, or low-risk vulnerabilities identified in ongoing assessments and scans. Raw scan reports are made available to @FedRAMP Project Management Office monthly.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify has Nessus scan exports that demonstrate that authenticated vulnerability scanning is being performed. Access keys and secret keys are utilized to ensure the appropriate depth of scanning. Based on Nessus scan exports it shows that Paramify is performing daily scans. Infrastructure scans and web application scans are both performed using Nessus. Containers are scanned via SentinelOne Endpoint. Evidence demonstrates the configurations of the scan that shows multiple plugins being enabled.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Nessus Scan configs
                  description: OS, DB, and Web App vulnerability scan tool configurations
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Web Scan Pre Paramify Com 2 Policy 7dxuty
                      reference: Web Scan pre_paramify_com 2_policy_7dxuty (2).json
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Compliance RDS Pre Policy Erllt5
                      reference: Compliance RDS Pre_policy_erllt5 (2).json
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: DB Plugins Used Nessus Configuration
                      reference: DB_plugins_used_Nessus_configuration (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Web Scan Plugins Used Configuration
                      reference: Web_scan_plugins_used_configuration (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: "Nessus Scanning: Automated Export Examples"
                  description: >-
                    Daily export of Nessus scans to AWS S3 bucket. 


                    This evidence demonstrates Paramify’s use of Nessus for authenticated vulnerability scanning across infrastructure and web applications. Evidence shows:


                    - Authenticated scans using access and secret keys for deeper results.

                    - Daily scan exports confirming recurring automated scanning.

                    - Infrastructure and web application scans performed via Nessus.

                    - Container scanning performed via SentinelOne Endpoint.

                    - Scan configurations with multiple plugins enabled to ensure breadth of coverage.

                    - S3 bucket evidence showing secure storage of scan exports in US Gov West 1.
                  instructions: Log in to the Nessus console. Navigate to Scan History to view recent infrastructure and web application scans. Export scan results in CSV or JSON format. Confirm scans include authenticated checks by verifying use of access/secret keys. Capture configuration details showing enabled plugins. Retrieve and document S3 bucket contents/URL where automated exports are stored.
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Target Scan B131zv
                      reference: Target_Scan_b131zv.csv
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Target Scan B131zv
                      reference: Target_Scan_b131zv.csv
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Control Implementation
                      reference: control-implementation (4).csv
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Nessus Scan Export Us Gov West 1 S3 Bucket contents screenshot
                      reference: nessus-scan-export-us-gov-west-1.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: "Example 1: 2025 06 24 22 08 48"
                      reference: 2025-06-24-22-08-48.json
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: "Example 2: 2025 06 23 22 08 48"
                      reference: 2025-06-23-22-08-48.json
                      outputResults: ""
                      effectiveDate: 2025-06-23T00:00:00.000Z
                  - artifact:
                      name: Nessus Scan Export Us Gov West 1 S3 Bucket URL
                      reference: https://console.amazonaws-us-gov.com/s3/buckets/nessus-scan-export-214149890209-us-gov-west-1?region=us-gov-west-1&tab=objects
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Guard Duty
                  description: Script for AWS GuardDuty validation
                  instructions: "Check GuardDuty setup - List detector IDs `aws guardduty list-detectors` - Get detector configuration details `aws guardduty get-detector --detector-id <detector-id>` Output: Creates unique JSON file and appends to directory-based monitoring files"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/guard_duty.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Guard Duty
                      reference: guard_duty.json
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: "Nessus Scanning: Lamba to perform Automated Export "
                  description: Lambda to export daily result of Nessus scans to AWS S3 bucket
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Nessus Scan Export Lambda
                      reference: nessus_scan_export_lambda.py
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
          - validation:
              shortName: MLA-05
              description: Perform Infrastructure as Code and configuration evaluation and testing
              implementation:
              - >
                Title: Pre-Deployment Scanning

                Content: During development and testing, the @DevOps Admin and @Developer analyze builds for vulnerabilities using @GitLab. Security flaws trigger a ticket in @Linear for the @Developer to fix. Only approved builds move to production. Remediation progress is monitored by the @DevOps Admin.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify leverages GitLab for release development. There are requirements to approve a release prior to moving it to production. This involves SAST through semgrep, dependency auditing, container vulnerability scanning with Grype. Builds are executed using Kaniko, applications are deployed to Kubernetes via kubectl only on merge to main, and a review environment is stood up to support evaluation.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Paramify CI/CD Pipeline (with scan example)
                  description: >-
                    Paramify CI/CD Pipeline with scans example. See Instructions for detailed explanation of the security components involved in the pipeline.


                    Complete YAML of GitLab pipeline is provided with visualization of steps and example screenshots showing what the process looks like from the DevOps side.
                  instructions: "Paramify CI/CD Pipeline with security scans Paramify's GitLab CI/CD pipeline includes multiple layers of security and change management to ensure software artifacts are secure, policy-compliant, and auditable at every stage of delivery. 1. Hardened Base Images All container images are built using Wolfi base images from Chainguard: image: name: cgr.dev/chainguard/node:22@sha256:... These distroless, minimal images are curated to include zero or minimal known CVEs, significantly reducing the baseline attack surface. 2. Mandatory Security Scanning Security scans are integrated directly into the CI pipeline to enforce vulnerability thresholds before deployment or merging. Static Code Analysis (SAST):Uses Semgrep to detect common coding vulnerabilities: test_sast: image: semgrep/semgrep:latest script: - semgrep ci --config auto npm Dependency Auditing:npm audit checks for vulnerable third-party packages: script: - npm audit --audit-level high - npm audit signatures Container Vulnerability Scanning:Uses Grype with a customized GRYPE_CONFIG to filter false positives while enforcing a --fail-on medium policy: script: - grype --fail-on medium --config ~/grype.yaml \"${ECR_URL}/paramify:${CI_COMMIT_SHORT_SHA}\" Scanning is enforced during the test stage before deployment, ensuring insecure builds do not reach production. 3. Secure Build and Deployment Controls Builds are executed using Kaniko: image: gcr.io/kaniko-project/executor:v1.23.2-debug script: - /kaniko/executor --context=... --destination=... Applications are deployed to Kubernetes via kubectl only on merge to main: deploy_eks: rules: - if: $CI_COMMIT_BRANCH == \"main\" A review environment is spun up dynamically for merge requests and is manually stoppable: deploy_review: environment: name: review/$CI_MERGE_REQUEST_IID-$CI_COMMIT_REF_SLUG url: https://$CI_MERGE_REQUEST_IID.dev.paramify.com Images cannot be pushed to ECR unless they pass all prior vulnerability scans and build stages. 4. Vulnerability Exception and Change Control Process If vulnerabilities are discovered that cannot be immediately remediated (e.g., in upstream npm packages or OS dependencies), a ticket is created in the CloudOps Change Management GitLab, which is:Self-hosted within AWS GovCloud FedRAMP boundary for controlled access. Used to track, review, and approve exceptions and mitigation steps. This ensures:Accountability for deferred patching. Auditability of all risk decisions. Traceability from detection to resolution. Summary This pipeline enforces a “no deploy without remediation” policy through automated scanning, minimal and verified base images, and integrated exception management workflows."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Grype Paramify 2024 09 26
                      reference: grype_paramify_2024-09-26.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Update Base Image To 20240930 Middot Merge Requests Middot Paramify Paramify Middot Git Lab
                      reference: Update base image to 20240930 (50) middot Merge requests middot Paramify _ paramify middot GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: CI/CD pipeline visualization
                      reference: Screenshot 2025-06-30 at 5.07.32 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: CI/CD Pipeline (machine-readable code)
                      reference: ci-cd-pipeline.yaml
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
          - validation:
              shortName: MLA-06
              description: Centrally track and prioritize the mitigation and/or remediation of identified vulnerabilities
              implementation:
              - >
                Title: Corrective Action Plan

                Content: Identified issues resulting from @Continuous Monitoring Process are given owners and tracked to remediation via @Paramify.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: The Paramify platform has the ability to open issues in a centralized manner and track remediation against those issues. Issues that have been addressed are moved to the Closed tab. Paramify also performs trend analysis within the platform to track open vs closed, open by risk level, and scan targets.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Issues - ConMon Paramify
                  description: ""
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Issues ConMon
                      reference: https://app.paramify.com/assessments/81e6e4f7-236e-4b54-9f07-e8593bea4606/issues?s=OPEN&page=1&pageSize=10
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Trend Analysis Paramify Issues
                  description: ""
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Trend Analysis Dashboard
                      reference: https://app.paramify.com/programs/4678075a-9949-4f56-9bf1-7c45eb955f97/trend-analysis?rl=low&rl=moderate&rl=high&rl=critical&it=vulnerability&it=configuration
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
      - KSI:
          name: Change Management
          shortName: CMT
          Validations:
          - validation:
              shortName: CMT-01
              description: Log and monitor system modifications
              implementation:
              - >
                Title: Configuration Management Plan Scope & Review

                Content: The Paramify Cloud @Configuration Management Plan and baseline configurations are reviewed at least annually for security impacts, especially when new services are provisioned. All changes to the baseline are tracked in @GitLab. 

                The @Configuration Management Plan covers changes impacting data confidentiality, integrity, and availability, including system updates and hardware/software integrations. Tasks such as data visualization and load balancing, focused on observability and performance optimization, are excluded from its scope.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Paramify utilizes a script to check AWS Config setup, check EventBridge rule for new resource detection, check SNS topic for alerts, and verify monitoring interval. Config recorder provides the detection of a new resource with the rule description indicating that it is designed to detect within 5 minutes of a new resource launched in AWS. Email notifications are received through SNS when a new resource is detected. The workflow is AWS Config > EventBridge > SNS > Email notification. Paramify manages merge requests in GitLab. Within GitLab there are approvals reflected for each merge request. Paramify has a process for tracking change requests which includes capturing the scope, impact, details of the change, schedule, rollback plan, and impact and security analysis.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Change Management GitLab (CloudOps Self-hosted)
                  description: Change Management GitLab (CloudOps Self-hosted)
                  instructions: "🔒 Change Management GitLab (Self-Hosted in Boundary) Paramify maintains a self-hosted GitLab instance dedicated to Change Management, isolated within the AWS GovCloud FedRAMP boundary to ensure controlled access and traceability. This GitLab tracks and manages all version upgrades, infrastructure changes, and security patching activities, such as: Upgrading Amazon EKS clusters Updating SentinelOne agents Modifying WAF rules Creating or rotating Okta API tokens Each Change Request is submitted as a merge request, following a structured template to ensure review consistency and audit readiness. 🔗 Current Change Requests: Log in to https://gitlab.paramify.com/cloudops/change-management/-/merge_requests to view active and historical change requests. A machine-readable Change Management Merge Requests XML Feed is also available for programmatic access or audit ingestion. 🔐 Access Control Access to the Change Management GitLab is tightly restricted: AWS VPN connection required Okta authentication with Yubikey MFA Only CloudOps team members explicitly approved for GitLab access are granted permissions This ensures segregation of duties, strong identity verification, and controlled change authorization. Change Request Ticket Fields Each ticket (merge request) includes the following standardized fields: Field Description Title & Summary Short description of the change (e.g., “Upgrade SentinelOne Agent”) Scope Affected systems: Helm deployments, Terraform code, or manual steps Impact Rating Risk classification: C1 (High) to C4 (No/Low Impact) Requested Changes Technical rationale and proposed action Impact & Security Analysis Review of risk exposure and mitigations Schedule Planned date/time for implementation Deployment & Rollback Plan Precise steps to apply and undo the change, if needed Results Outcome: successful, failed, or rescheduled Approval Workflow (CCB Process) Merge requests are blocked until explicitly approved by a member of the Change Control Board (CCB) After CCB approval, changes are deployed and verified, and the merge request is then closed to complete the workflow This process ensures:Traceability from detection to resolution Accountability for deferred patching and production changes Auditability across infrastructure and application changes 🔍 Example: SVG Upload WAF Rule Change Title: Update WAF rules to allow SVG file uploads Scope: Other (manual changes) Impact: C3 – Low Impact/Risk, requires manual WAF rule update Security Analysis: Adds MIME-type exception for SVG, constrained via custom AWS WAF rule Schedule: 06/20/2025 @ 3PM Deployment Steps: Modify AWSManagedRulesCommonRuleSet + Add custom override rule Approval: ✅ CCB Approved Result: ✅ Change completed successfully 📌 Summary This Change Management system provides: A formal and structured process for approving all changes to code, configuration, and infrastructure Controlled access, limited to CloudOps personnel with Okta/Yubikey and VPN Full audit trails for compliance with FedRAMP, CMMC, SOC 2, and internal governance standards"
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: "Merge Requests list URL "
                      reference: https://gitlab.paramify.com/cloudops/change-management/-/merge_requests/?sort=created_date&state=all&first_page_size=20
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Merge Requests List
                      reference: Merge Requests list.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Git Lab
                      reference: Change Management GitLab.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Example Change Request Create Okta API Token (New User And Token) (!48) · Merge Requests · Paramify Cloud Ops Change Management · Git Lab
                      reference: Example Change Request - Create Okta API Token (new user and token) (!48) · Merge requests · Paramify CloudOps _ Change Management · GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Merge Requests (XML)
                      reference: change_management_merge_requests.xml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: Inventory branch of Change Management GitLab
                  description: Inventory branch of Change Management GitLab (CloudOps Self-hosted)
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Inventory branch commits URL
                      reference: https://gitlab.paramify.com/cloudops/change-management/-/commits/inventory?ref_type=heads
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Inventory Branch Commits
                      reference: Inventory branch commits.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Machine Readable - Change Management Paramify Gitlab Inventory Branch
                      reference: change-management-paramify-gitlab-inventory-branch.xml
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Detect New AWS Resource
                  description: We have AWS Config watching all AWS resource creation and an Event Bridge rule which alerts on new resource creation within 5 minutes and sends an Email alert via a SNS topic to the infosec@paramify.com Gmail group alerting them about the new resource.
                  instructions: '1. Check AWS Config setup `aws configservice describe-configuration-recorders` `aws configservice describe-configuration-recorder-status` `aws configservice describe-delivery-channels` 2. Check EventBridge rule for new resource detection `aws events list-rules --name "New-Resource-Launched-Alert-Rule"` `aws events list-targets-by-rule --rule "New-Resource-Launched-Alert-Rule"` `aws events describe-rule --name "New-Resource-Launched-Alert-Rule"` 3. Check SNS topic for alerts `aws sns list-topics` `aws sns list-subscriptions-by-topic --topic-arn <New_AWS_Resource_Launch_Detected>` 4. Verify monitoring interval Check if EventBridge rule schedule is 5 minutes or less Output: Creates JSON with validation results and writes to CSV'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: "TODO: Verify the script output is as intended -- I think the last part of this script doesn't function properly - Isaac"
                  Artifacts:
                  - artifact:
                      name: Paramify Mail AWS Notification Message
                      reference: Paramify Mail - AWS Notification Message (2).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Detect Unauthorized Components Setup
                      reference: Detect_unauthorized_components_setup (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: SNS Topic
                      reference: SNS_Topic (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Event Bridge Rule
                      reference: Event_Bridge_Rule (1).png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/detect_new_aws_resource.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Detect New Aws Resource
                      reference: detect_new_aws_resource.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: EKS Pod inventory
                  description: >-
                    Script to pull EKS pods, containers, deployments, etc. Used for inventory in CCB.


                    Evidence for EKS pod inventory, resource usage, and asset tracking
                  instructions: "Script: eks_pod_inventory.sh. Commands executed: Review EKS pod deployments, resource allocations, and inventory management using kubectl commands"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/eks_pod_inventory.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Eks All Clusters Pod Inventory
                      reference: eks_all_clusters_pod_inventory.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
          - validation:
              shortName: CMT-02
              description: Execute changes through redeployment of version controlled immutable resources rather than direct modification wherever possible
              implementation:
              - >
                Title: Approved Software Review

                Content: Paramify uses @Terraform to install infrastructure services on @AWS GovCloud. Software is deployed to @EKS nodes using @Helm. The @Change Control Board meets weekly to review changes to Paramify Cloud, including @Helm and @Terraform scripts that reside in @GitLab. If a software reaches end-of-life, is not appropriately licensed, or critical threats are detected, the @Change Control Board and @DevOps Admin collaborate to identify an authorized replacement and scripts are updated.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify leverages Helm and Terraform scripts that reside in GitLab that allow for the redeployment of resources. Paramify makes update to code and goes through required testing and approvals. Once approved the change is then able to be pushed to production to implement any required updates or changes. Evidence of merge requests showing the approvals taking place and use of terraform was provided. There is a main branch for govcloud-infrastructure-in-terraform. Paramify provided the Terraform state files for both pre and prod environments showing that infrastructure is managed as code.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Gov-Prod Terraform Repository (in GitLab)
                  description: The evidence includes Terraform code for GovCloud infrastructure on GitLab with a URL to the repository, a PNG of the file structure and commit history, and a ZIP of the full repository.
                  instructions: Access the GitLab repository using the provided URL (https://gitlab.com/paramify/govcloud-infrastructure-in-terraform) to review the Terraform code and configuration files online. Review the PNG image to verify the repository structure, file names, last commit details, and update history as of June 30, 2025. Extract and analyze the ZIP file to examine the complete set of Terraform files, including provider configurations, variable files, and service definitions, ensuring consistency with the online repository. Validate with Terraform TF State files
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: GitLab Terraform code for GovCloud infra
                      reference: Screenshot 2025-06-30 at 4.58.40 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Untitled Artifact
                      reference: https://gitlab.com/paramify/govcloud-infrastructure-in-terraform
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Govcloud Infrastructure In Terraform Main
                      reference: govcloud-infrastructure-in-terraform-main.zip
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: Change Management GitLab (CloudOps Self-hosted)
                  description: Change Management GitLab (CloudOps Self-hosted)
                  instructions: "🔒 Change Management GitLab (Self-Hosted in Boundary) Paramify maintains a self-hosted GitLab instance dedicated to Change Management, isolated within the AWS GovCloud FedRAMP boundary to ensure controlled access and traceability. This GitLab tracks and manages all version upgrades, infrastructure changes, and security patching activities, such as: Upgrading Amazon EKS clusters Updating SentinelOne agents Modifying WAF rules Creating or rotating Okta API tokens Each Change Request is submitted as a merge request, following a structured template to ensure review consistency and audit readiness. 🔗 Current Change Requests: Log in to https://gitlab.paramify.com/cloudops/change-management/-/merge_requests to view active and historical change requests. A machine-readable Change Management Merge Requests XML Feed is also available for programmatic access or audit ingestion. 🔐 Access Control Access to the Change Management GitLab is tightly restricted: AWS VPN connection required Okta authentication with Yubikey MFA Only CloudOps team members explicitly approved for GitLab access are granted permissions This ensures segregation of duties, strong identity verification, and controlled change authorization. Change Request Ticket Fields Each ticket (merge request) includes the following standardized fields: Field Description Title & Summary Short description of the change (e.g., “Upgrade SentinelOne Agent”) Scope Affected systems: Helm deployments, Terraform code, or manual steps Impact Rating Risk classification: C1 (High) to C4 (No/Low Impact) Requested Changes Technical rationale and proposed action Impact & Security Analysis Review of risk exposure and mitigations Schedule Planned date/time for implementation Deployment & Rollback Plan Precise steps to apply and undo the change, if needed Results Outcome: successful, failed, or rescheduled Approval Workflow (CCB Process) Merge requests are blocked until explicitly approved by a member of the Change Control Board (CCB) After CCB approval, changes are deployed and verified, and the merge request is then closed to complete the workflow This process ensures:Traceability from detection to resolution Accountability for deferred patching and production changes Auditability across infrastructure and application changes 🔍 Example: SVG Upload WAF Rule Change Title: Update WAF rules to allow SVG file uploads Scope: Other (manual changes) Impact: C3 – Low Impact/Risk, requires manual WAF rule update Security Analysis: Adds MIME-type exception for SVG, constrained via custom AWS WAF rule Schedule: 06/20/2025 @ 3PM Deployment Steps: Modify AWSManagedRulesCommonRuleSet + Add custom override rule Approval: ✅ CCB Approved Result: ✅ Change completed successfully 📌 Summary This Change Management system provides: A formal and structured process for approving all changes to code, configuration, and infrastructure Controlled access, limited to CloudOps personnel with Okta/Yubikey and VPN Full audit trails for compliance with FedRAMP, CMMC, SOC 2, and internal governance standards"
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: "Merge Requests list URL "
                      reference: https://gitlab.paramify.com/cloudops/change-management/-/merge_requests/?sort=created_date&state=all&first_page_size=20
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Merge Requests List
                      reference: Merge Requests list.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Git Lab
                      reference: Change Management GitLab.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Example Change Request Create Okta API Token (New User And Token) (!48) · Merge Requests · Paramify Cloud Ops Change Management · Git Lab
                      reference: Example Change Request - Create Okta API Token (new user and token) (!48) · Merge requests · Paramify CloudOps _ Change Management · GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Merge Requests (XML)
                      reference: change_management_merge_requests.xml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: K8s network policies
                  description: ""
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: K8s network policies
                      reference: networkpolicies.yaml
                      outputResults: ""
                      effectiveDate: 2025-06-26T00:00:00.000Z
              - evidence:
                  name: "Paramify EKS Infra Terraform Script "
                  description: "Paramify EKS Infra Terraform Script "
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Aws Paramify EKS Infra
                      reference: aws-paramify-eks-infra.tf
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: Kubectl Hardening script
                  description: Kubectl hardening script
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Harden
                      reference: harden.txt
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: Terraform State files
                  description: The gov-pre and gov-prod tf state files are Terraform state files used to manage the infrastructure configurations for the pre-production (gov-pre) and production (gov-prod) environments of the GovCloud infrastructure. These files track the current state of resources, including provider settings, service configurations, and variable definitions, ensuring consistent deployment and management across environments.
                  instructions: TF (Terraform) state files are stored in paramify-terraform-state S3 bucket and can be exported from S3 or via terraform CLI.
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: gov-prod tf state
                      reference: tfstate.json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: gov-pre tf state
                      reference: tfstate (1).json
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
          - validation:
              shortName: CMT-03
              description: Implement automated testing and validation of changes prior to deployment
              implementation:
              - >
                Title: Pre-Deployment Scanning

                Content: During development and testing, the @DevOps Admin and @Developer analyze builds for vulnerabilities using @GitLab. Security flaws trigger a ticket in @Linear for the @Developer to fix. Only approved builds move to production. Remediation progress is monitored by the @DevOps Admin.
              - >
                Title: Code Review

                Content: Paramify Cloud code undergoes peer review by two @Developers, using @GitLab for static analysis to identify common flaws. Changes are implemented, reviewed, and approved before deployment into the staging environment.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify receives scanner outputs that require triage in Linear. Paramify uses the Premium software-as-a-service (SaaS) Plan within GitLab which supports additional testing and verification capabilities. Grype is also used as part of CI/CD pipeline scanning to identify issues. These are then tracked in merge requests to remediate prior to deploying to production. RIZ 370 scanner was also used to identify issues in code.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: SAST scan results and proof of remediation on installed release
                  description: Static code analysis scan results and proof of remediation on installed release
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Sast Issues
                      reference: paramify-sast-issues.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Gitlab Paramify Premium Saas
                      reference: gitlab-paramify-premium-saas.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Gitlab Paramify Ci Sast Include
                      reference: gitlab-paramify-ci-sast-include.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: RIZ 370 SCANNER Incorrect Regular Expression
                      reference: RIZ-370 SCANNER_ Incorrect regular expression.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Paramify CI/CD Pipeline (with scan example)
                  description: >-
                    Paramify CI/CD Pipeline with scans example. See Instructions for detailed explanation of the security components involved in the pipeline.


                    Complete YAML of GitLab pipeline is provided with visualization of steps and example screenshots showing what the process looks like from the DevOps side.
                  instructions: "Paramify CI/CD Pipeline with security scans Paramify's GitLab CI/CD pipeline includes multiple layers of security and change management to ensure software artifacts are secure, policy-compliant, and auditable at every stage of delivery. 1. Hardened Base Images All container images are built using Wolfi base images from Chainguard: image: name: cgr.dev/chainguard/node:22@sha256:... These distroless, minimal images are curated to include zero or minimal known CVEs, significantly reducing the baseline attack surface. 2. Mandatory Security Scanning Security scans are integrated directly into the CI pipeline to enforce vulnerability thresholds before deployment or merging. Static Code Analysis (SAST):Uses Semgrep to detect common coding vulnerabilities: test_sast: image: semgrep/semgrep:latest script: - semgrep ci --config auto npm Dependency Auditing:npm audit checks for vulnerable third-party packages: script: - npm audit --audit-level high - npm audit signatures Container Vulnerability Scanning:Uses Grype with a customized GRYPE_CONFIG to filter false positives while enforcing a --fail-on medium policy: script: - grype --fail-on medium --config ~/grype.yaml \"${ECR_URL}/paramify:${CI_COMMIT_SHORT_SHA}\" Scanning is enforced during the test stage before deployment, ensuring insecure builds do not reach production. 3. Secure Build and Deployment Controls Builds are executed using Kaniko: image: gcr.io/kaniko-project/executor:v1.23.2-debug script: - /kaniko/executor --context=... --destination=... Applications are deployed to Kubernetes via kubectl only on merge to main: deploy_eks: rules: - if: $CI_COMMIT_BRANCH == \"main\" A review environment is spun up dynamically for merge requests and is manually stoppable: deploy_review: environment: name: review/$CI_MERGE_REQUEST_IID-$CI_COMMIT_REF_SLUG url: https://$CI_MERGE_REQUEST_IID.dev.paramify.com Images cannot be pushed to ECR unless they pass all prior vulnerability scans and build stages. 4. Vulnerability Exception and Change Control Process If vulnerabilities are discovered that cannot be immediately remediated (e.g., in upstream npm packages or OS dependencies), a ticket is created in the CloudOps Change Management GitLab, which is:Self-hosted within AWS GovCloud FedRAMP boundary for controlled access. Used to track, review, and approve exceptions and mitigation steps. This ensures:Accountability for deferred patching. Auditability of all risk decisions. Traceability from detection to resolution. Summary This pipeline enforces a “no deploy without remediation” policy through automated scanning, minimal and verified base images, and integrated exception management workflows."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Grype Paramify 2024 09 26
                      reference: grype_paramify_2024-09-26.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Update Base Image To 20240930 Middot Merge Requests Middot Paramify Paramify Middot Git Lab
                      reference: Update base image to 20240930 (50) middot Merge requests middot Paramify _ paramify middot GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: CI/CD pipeline visualization
                      reference: Screenshot 2025-06-30 at 5.07.32 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: CI/CD Pipeline (machine-readable code)
                      reference: ci-cd-pipeline.yaml
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
          - validation:
              shortName: CMT-04
              description: Have a documented change management procedure
              implementation:
              - >
                Title: Change Request

                Content: Change proposals for Paramify Cloud are assessed in @GitLab by component owners, encompassing activities and decisions. The @Change Control Board meets weekly and conducts bi-weekly monitoring of the @Change Management Process. Only administrators with @IAM authorization can execute changes.


                The @DevOps Admin tracks and records all releases for Paramify Cloud indefinitely using @GitLab.
              - >
                Title: Change Control Board

                Content: Paramify oversees and approves changes to Paramify Cloud through a controlled @Change Management Process, led by the @Change Control Board.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify maintains a Change Management Process document. The version reviewed was version 1.0, dated 9/27/2024.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Paramify Change Management Process
                  description: The Paramify Change Management Process governs all changes to infrastructure and applications within the Paramify platform. Utilizing Infrastructure as Code (IaC), Paramify automates the build of the entire platform from an approved state, minimizing nonstandard changes to enhance security resilience and overall functionality. All changes are managed through the CloudOps Hosted GitLab (GitLab).
                  instructions: "Paramify's Change Management Process governs all changes to the company's infrastructure and applications. The process leverages Infrastructure as Code (IaC) and manages all changes through CloudOps Hosted GitLab. Key aspects of the process include: Change Types: Five distinct types of changes are supported:Infrastructure Change: Modifications to foundational platform components (e.g., AWS VPC, S3, security tools), managed with Terraform. Application Change: Modifications to non-internal applications (e.g., Production GitLab, SentinelOne Agent), managed with Helm Charts. Release Change: Deployment of new Paramify platform software releases, managed with Helm. Nonstandard Change: One-off, non-automated modifications requiring detailed change requests. Emergency Change: Urgent issues impacting data confidentiality, integrity, or availability, which bypass the standard process but require retroactive approval. Change Control Board (CCB): This board reviews and approves all proposed changes, ensuring alignment with security and operational standards. It consists of the Head of DevOps, Head of IT, and CISO/ISSO or their delegates, with a minimum of two representatives required for meetings. The CCB meets weekly. Change Tickets: Every change must be documented in a GitLab Change Ticket, which includes sections for scope, impact level, description, business justification, steps required, rollback plan, CCB approval, and DevOps confirmation. Tools and Components: The process utilizes Terraform for infrastructure, Helm Charts for application and release deployments, GitLab for version control and change tickets, Jira for release tickets, and Slack for emergency change notifications."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Change Management Process
                      reference: Paramify Change Management Process.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
              - evidence:
                  name: Change Management GitLab (CloudOps Self-hosted)
                  description: Change Management GitLab (CloudOps Self-hosted)
                  instructions: "🔒 Change Management GitLab (Self-Hosted in Boundary) Paramify maintains a self-hosted GitLab instance dedicated to Change Management, isolated within the AWS GovCloud FedRAMP boundary to ensure controlled access and traceability. This GitLab tracks and manages all version upgrades, infrastructure changes, and security patching activities, such as: Upgrading Amazon EKS clusters Updating SentinelOne agents Modifying WAF rules Creating or rotating Okta API tokens Each Change Request is submitted as a merge request, following a structured template to ensure review consistency and audit readiness. 🔗 Current Change Requests: Log in to https://gitlab.paramify.com/cloudops/change-management/-/merge_requests to view active and historical change requests. A machine-readable Change Management Merge Requests XML Feed is also available for programmatic access or audit ingestion. 🔐 Access Control Access to the Change Management GitLab is tightly restricted: AWS VPN connection required Okta authentication with Yubikey MFA Only CloudOps team members explicitly approved for GitLab access are granted permissions This ensures segregation of duties, strong identity verification, and controlled change authorization. Change Request Ticket Fields Each ticket (merge request) includes the following standardized fields: Field Description Title & Summary Short description of the change (e.g., “Upgrade SentinelOne Agent”) Scope Affected systems: Helm deployments, Terraform code, or manual steps Impact Rating Risk classification: C1 (High) to C4 (No/Low Impact) Requested Changes Technical rationale and proposed action Impact & Security Analysis Review of risk exposure and mitigations Schedule Planned date/time for implementation Deployment & Rollback Plan Precise steps to apply and undo the change, if needed Results Outcome: successful, failed, or rescheduled Approval Workflow (CCB Process) Merge requests are blocked until explicitly approved by a member of the Change Control Board (CCB) After CCB approval, changes are deployed and verified, and the merge request is then closed to complete the workflow This process ensures:Traceability from detection to resolution Accountability for deferred patching and production changes Auditability across infrastructure and application changes 🔍 Example: SVG Upload WAF Rule Change Title: Update WAF rules to allow SVG file uploads Scope: Other (manual changes) Impact: C3 – Low Impact/Risk, requires manual WAF rule update Security Analysis: Adds MIME-type exception for SVG, constrained via custom AWS WAF rule Schedule: 06/20/2025 @ 3PM Deployment Steps: Modify AWSManagedRulesCommonRuleSet + Add custom override rule Approval: ✅ CCB Approved Result: ✅ Change completed successfully 📌 Summary This Change Management system provides: A formal and structured process for approving all changes to code, configuration, and infrastructure Controlled access, limited to CloudOps personnel with Okta/Yubikey and VPN Full audit trails for compliance with FedRAMP, CMMC, SOC 2, and internal governance standards"
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: "Merge Requests list URL "
                      reference: https://gitlab.paramify.com/cloudops/change-management/-/merge_requests/?sort=created_date&state=all&first_page_size=20
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Merge Requests List
                      reference: Merge Requests list.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Git Lab
                      reference: Change Management GitLab.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Example Change Request Create Okta API Token (New User And Token) (!48) · Merge Requests · Paramify Cloud Ops Change Management · Git Lab
                      reference: Example Change Request - Create Okta API Token (new user and token) (!48) · Merge requests · Paramify CloudOps _ Change Management · GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Merge Requests (XML)
                      reference: change_management_merge_requests.xml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
          - validation:
              shortName: CMT-05
              description: Evaluate the risk and potential impact of any change
              implementation:
              - >
                Title: Change Control Board

                Content: Paramify oversees and approves changes to Paramify Cloud through a controlled @Change Management Process, led by the @Change Control Board.
              - >
                Title: Approved Software Review

                Content: Paramify uses @Terraform to install infrastructure services on @AWS GovCloud. Software is deployed to @EKS nodes using @Helm. The @Change Control Board meets weekly to review changes to Paramify Cloud, including @Helm and @Terraform scripts that reside in @GitLab. If a software reaches end-of-life, is not appropriately licensed, or critical threats are detected, the @Change Control Board and @DevOps Admin collaborate to identify an authorized replacement and scripts are updated.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify uses merge requests to track changes. There is analysis done within the merge requests to assess an security impacts that may arise. Tools such as GitLab are used for this purpose.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Change Management GitLab (CloudOps Self-hosted)
                  description: Change Management GitLab (CloudOps Self-hosted)
                  instructions: "🔒 Change Management GitLab (Self-Hosted in Boundary) Paramify maintains a self-hosted GitLab instance dedicated to Change Management, isolated within the AWS GovCloud FedRAMP boundary to ensure controlled access and traceability. This GitLab tracks and manages all version upgrades, infrastructure changes, and security patching activities, such as: Upgrading Amazon EKS clusters Updating SentinelOne agents Modifying WAF rules Creating or rotating Okta API tokens Each Change Request is submitted as a merge request, following a structured template to ensure review consistency and audit readiness. 🔗 Current Change Requests: Log in to https://gitlab.paramify.com/cloudops/change-management/-/merge_requests to view active and historical change requests. A machine-readable Change Management Merge Requests XML Feed is also available for programmatic access or audit ingestion. 🔐 Access Control Access to the Change Management GitLab is tightly restricted: AWS VPN connection required Okta authentication with Yubikey MFA Only CloudOps team members explicitly approved for GitLab access are granted permissions This ensures segregation of duties, strong identity verification, and controlled change authorization. Change Request Ticket Fields Each ticket (merge request) includes the following standardized fields: Field Description Title & Summary Short description of the change (e.g., “Upgrade SentinelOne Agent”) Scope Affected systems: Helm deployments, Terraform code, or manual steps Impact Rating Risk classification: C1 (High) to C4 (No/Low Impact) Requested Changes Technical rationale and proposed action Impact & Security Analysis Review of risk exposure and mitigations Schedule Planned date/time for implementation Deployment & Rollback Plan Precise steps to apply and undo the change, if needed Results Outcome: successful, failed, or rescheduled Approval Workflow (CCB Process) Merge requests are blocked until explicitly approved by a member of the Change Control Board (CCB) After CCB approval, changes are deployed and verified, and the merge request is then closed to complete the workflow This process ensures:Traceability from detection to resolution Accountability for deferred patching and production changes Auditability across infrastructure and application changes 🔍 Example: SVG Upload WAF Rule Change Title: Update WAF rules to allow SVG file uploads Scope: Other (manual changes) Impact: C3 – Low Impact/Risk, requires manual WAF rule update Security Analysis: Adds MIME-type exception for SVG, constrained via custom AWS WAF rule Schedule: 06/20/2025 @ 3PM Deployment Steps: Modify AWSManagedRulesCommonRuleSet + Add custom override rule Approval: ✅ CCB Approved Result: ✅ Change completed successfully 📌 Summary This Change Management system provides: A formal and structured process for approving all changes to code, configuration, and infrastructure Controlled access, limited to CloudOps personnel with Okta/Yubikey and VPN Full audit trails for compliance with FedRAMP, CMMC, SOC 2, and internal governance standards"
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: "Merge Requests list URL "
                      reference: https://gitlab.paramify.com/cloudops/change-management/-/merge_requests/?sort=created_date&state=all&first_page_size=20
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Merge Requests List
                      reference: Merge Requests list.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Git Lab
                      reference: Change Management GitLab.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Example Change Request Create Okta API Token (New User And Token) (!48) · Merge Requests · Paramify Cloud Ops Change Management · Git Lab
                      reference: Example Change Request - Create Okta API Token (new user and token) (!48) · Merge requests · Paramify CloudOps _ Change Management · GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Merge Requests (XML)
                      reference: change_management_merge_requests.xml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
      - KSI:
          name: Policy and Inventory
          shortName: PIY
          Validations:
          - validation:
              shortName: PIY-01
              description: Have an up-to-date information resource inventory or code defining all deployed assets, software, and services
              implementation:
              - >
                Title: Data Inventory Reconciliation

                Content: The @Change Control Board reviews and approves the data inventory at least annually or whenever significant changes to Paramify Cloud occur. This process identifies which data types are stored and processed within Paramify Cloud, their respective components, the protection measures in place for each data type, and the roles authorized to access them. The data inventory is maintained in @Paramify.
              - >
                Title: Master Inventory Reconciliation: Amazon Systems Manager

                Content: Paramify Cloud leverages @AWS Config, a FedRAMP 20x-compliant component, to automatically maintain an up-to-date inventory, including component installations, removals, and updates to the information system.


                End User Responsibility: The @DevOps Admin reviews Paramify Cloud inventory in @AWS Config monthly to ensure assets have compliant security status with Paramify policies and controls applied.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify develops an inventory and utilizes various scripts to identify resources deployed in AWS to pull those into the inventory document. AWS Config serves as the primary tool to support this and enables the development of the inventory through automation scripts.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: AWS Config Monitoring
                  description: Script for AWS Config validation
                  instructions: "Check AWS Config setup - Get configuration recorder status `aws configservice describe-configuration-recorder-status` - View configuration recorder details `aws configservice describe-configuration-recorders` - Check delivery channel configuration `aws configservice describe-delivery-channels` Output: Creates JSON file(s)"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/aws_config_monitoring.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Aws Config Monitoring
                      reference: aws_config_monitoring.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Aws Config Monitoring
                      reference: aws_config_monitoring.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: Inventory branch of Change Management GitLab
                  description: Inventory branch of Change Management GitLab (CloudOps Self-hosted)
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Inventory branch commits URL
                      reference: https://gitlab.paramify.com/cloudops/change-management/-/commits/inventory?ref_type=heads
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Inventory Branch Commits
                      reference: Inventory branch commits.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Machine Readable - Change Management Paramify Gitlab Inventory Branch
                      reference: change-management-paramify-gitlab-inventory-branch.xml
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Inventory in Paramify
                  description: "Inventory in Paramify exported as CSV "
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Elements - Paramify
                      reference: https://app.paramify.com/elements?t=ALL
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Inventory Paramify Export
                      reference: inventory_paramify_export.csv
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: EKS Pod inventory
                  description: >-
                    Script to pull EKS pods, containers, deployments, etc. Used for inventory in CCB.


                    Evidence for EKS pod inventory, resource usage, and asset tracking
                  instructions: "Script: eks_pod_inventory.sh. Commands executed: Review EKS pod deployments, resource allocations, and inventory management using kubectl commands"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/eks_pod_inventory.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Eks All Clusters Pod Inventory
                      reference: eks_all_clusters_pod_inventory.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
              - evidence:
                  name: Paramify Cloud SSP Appendix M FedRAMP High v1.0
                  description: Paramify Cloud SSP Appendix M FedRAMP High v1.0
                  instructions: Auto-generated by Paramify's Document Robot
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Cloud SSP Appendix M Fed RAMP High V1 0
                      reference: Paramify_Cloud-SSP-Appendix_M-FedRAMP-High-v1_0.xlsx
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Paramify Boundary Diagram
                  description: Paramify Boundary Diagram
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Boundary Diagram
                      reference: Paramify-Boundary-Diagram.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
          - validation:
              shortName: PIY-02
              description: Have policies outlining the security objectives of all information resources
              implementation:
              - >
                Title: Policy Communication

                Content: Paramify developed @Data Protection Policies available to all personnel on @Google Drive, covering purpose, scope, management commitment, and compliance.
              - >
                Title: Policy Review

                Content: The @GRC Admin reviews and updates @Data Protection Policies annually and following significant changes. Upon updates, the most recent review date and version number is added to the version history table.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify has developed a comprehensive system security plan (SSP) that outlines the security objectives of all information resources. There are also policies and procedures that are securely managed within Google Drive alongside the SSP.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: InfoSec Policies - Google Drive
                  description: InfoSec Policies stored in Google Drive
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://drive.google.com/drive/folders/1os3Pv38YwhcZ80bnxLws6stePDPkQzZY
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Screenshot 2
                      reference: Screenshot 2025-06-16 at 5.12.46 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Screenshot 1
                      reference: Screenshot 2025-06-16 at 5.12.22 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
              - evidence:
                  name: Paramify Cloud SSP Policies and Procedures FedRAMP
                  description: Paramify Cloud-SSP-Policies_and_Procedures-FedRAMP
                  instructions: Auto-generated by Paramify's Document Robot
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Cloud SSP Policies and Procedures FedRAMP
                      reference: Paramify Cloud-SSP-Policies_and_Procedures-FedRAMP.zip
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: "Paramify SSP Appendix A: FedRAMP Security Controls"
                  description: "Paramify SSP Appendix A: FedRAMP Security Controls"
                  instructions: Auto-generated by Paramify's Document Robot
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Cloud SSP Appendix A Fed RAMP High V1 0
                      reference: Paramify_Cloud-SSP-Appendix_A-FedRAMP-High-v1_0.docx
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Policy Review
                  description: We need to review policies
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts: []
          - validation:
              shortName: PIY-03
              description: Maintain a vulnerability disclosure program
              implementation:
              - >
                Title: Relevant Vulnerabilities

                Content: The @InfoSec Admin establishes a channel for receiving public vulnerability reports for relevant components within Paramify Cloud.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify maintains a support page that allows for submitting a request as it relates to a vulnerability disclosure program. Bug/incident is able to be selected as a standard reason for submission.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Zendesk support and vulnerability disclosure
                  description: >-
                    Evidence for vulnerability disclosure processes and communication channels


                    Paramify maintains a support page that allows for submitting a request as it relates to a vulnerability disclosure program. Bug/incident is able to be selected as a standard reason for submission.
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://support.paramify.com/hc/en-us/requests/new
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
          - validation:
              shortName: PIY-04
              description: Build security considerations into the Software Development Lifecycle and align with CISA Secure By Design principles
              implementation:
              - >
                Title: Software Development Lifecycle Process

                Content: Paramify has a defined @Software Development Life Cycle Process for software development on Paramify Cloud. The @Product Manager and @Developer review product requirements and create user stories in @Linear.

                @Developer uses @GitLab for standard naming conventions, creating branches, and running automated tests.

                After coding is completed, the @Developer ensures that the requirements are satisfied, attaches a code review template, and marks it "under review." @GitLab automatically runs a suite of tests to ensure Paramify Cloud is working correctly.

                The @DevOps Admin lead completes the final review of changes and pushes them from staging to production. The @DevOps Admin monitors the environment to ensure Paramify Cloud works correctly.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify uses the tool Linear to establish product requirements and create user stories that drive development. Code development is done using GitLab which has various testing and integration functions. Paramify performs scanning at various stages in the software development lifecycle (SDLC) pipeline to address vulnerabilities.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Paramify CI/CD Pipeline (with scan example)
                  description: >-
                    Paramify CI/CD Pipeline with scans example. See Instructions for detailed explanation of the security components involved in the pipeline.


                    Complete YAML of GitLab pipeline is provided with visualization of steps and example screenshots showing what the process looks like from the DevOps side.
                  instructions: "Paramify CI/CD Pipeline with security scans Paramify's GitLab CI/CD pipeline includes multiple layers of security and change management to ensure software artifacts are secure, policy-compliant, and auditable at every stage of delivery. 1. Hardened Base Images All container images are built using Wolfi base images from Chainguard: image: name: cgr.dev/chainguard/node:22@sha256:... These distroless, minimal images are curated to include zero or minimal known CVEs, significantly reducing the baseline attack surface. 2. Mandatory Security Scanning Security scans are integrated directly into the CI pipeline to enforce vulnerability thresholds before deployment or merging. Static Code Analysis (SAST):Uses Semgrep to detect common coding vulnerabilities: test_sast: image: semgrep/semgrep:latest script: - semgrep ci --config auto npm Dependency Auditing:npm audit checks for vulnerable third-party packages: script: - npm audit --audit-level high - npm audit signatures Container Vulnerability Scanning:Uses Grype with a customized GRYPE_CONFIG to filter false positives while enforcing a --fail-on medium policy: script: - grype --fail-on medium --config ~/grype.yaml \"${ECR_URL}/paramify:${CI_COMMIT_SHORT_SHA}\" Scanning is enforced during the test stage before deployment, ensuring insecure builds do not reach production. 3. Secure Build and Deployment Controls Builds are executed using Kaniko: image: gcr.io/kaniko-project/executor:v1.23.2-debug script: - /kaniko/executor --context=... --destination=... Applications are deployed to Kubernetes via kubectl only on merge to main: deploy_eks: rules: - if: $CI_COMMIT_BRANCH == \"main\" A review environment is spun up dynamically for merge requests and is manually stoppable: deploy_review: environment: name: review/$CI_MERGE_REQUEST_IID-$CI_COMMIT_REF_SLUG url: https://$CI_MERGE_REQUEST_IID.dev.paramify.com Images cannot be pushed to ECR unless they pass all prior vulnerability scans and build stages. 4. Vulnerability Exception and Change Control Process If vulnerabilities are discovered that cannot be immediately remediated (e.g., in upstream npm packages or OS dependencies), a ticket is created in the CloudOps Change Management GitLab, which is:Self-hosted within AWS GovCloud FedRAMP boundary for controlled access. Used to track, review, and approve exceptions and mitigation steps. This ensures:Accountability for deferred patching. Auditability of all risk decisions. Traceability from detection to resolution. Summary This pipeline enforces a “no deploy without remediation” policy through automated scanning, minimal and verified base images, and integrated exception management workflows."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Grype Paramify 2024 09 26
                      reference: grype_paramify_2024-09-26.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Update Base Image To 20240930 Middot Merge Requests Middot Paramify Paramify Middot Git Lab
                      reference: Update base image to 20240930 (50) middot Merge requests middot Paramify _ paramify middot GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: CI/CD pipeline visualization
                      reference: Screenshot 2025-06-30 at 5.07.32 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: CI/CD Pipeline (machine-readable code)
                      reference: ci-cd-pipeline.yaml
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
          - validation:
              shortName: PIY-05
              description: Document methods used to evaluate information resource implementations
              implementation:
              - >
                Title: Corrective Action Plan

                Content: Identified issues resulting from @Continuous Monitoring Process are given owners and tracked to remediation via @Paramify.
              - >
                Title: Custom Response

                Content: Information resource implementations are tracked in @Paramify as Risk Solutions providing consistent risk management documentation including associated evidence. Risk solution evidence is gathered through scripts and automated processes to ensure the implementation status is accurate. 
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify has developed an SSP that details how various types of testing and scanning are performed in the environment. Areas such as CM-6, RA-5, and SA-11 address these components.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Issues - ConMon Paramify
                  description: ""
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Issues ConMon
                      reference: https://app.paramify.com/assessments/81e6e4f7-236e-4b54-9f07-e8593bea4606/issues?s=OPEN&page=1&pageSize=10
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: "Paramify 20x Evidence Scripts "
                  description: Repository of Paramify 20x Evidence scripts on GitHub that evaluate KSI implementation status for information resources.
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Run Evidence Validations
                      reference: run_evidence_validations.sh
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: GitHub repo of 20x Evidence scripts
                      reference: https://github.com/paramify/fedramp-20x-pilot/tree/main/evidence
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: Paramify Risk Solutions
                  description: Risk Solutions provide consistent risk management documentation including associated evidence
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Risk Solutions - Aug 29 2025
                      reference: risk-solutions (20).csv
                      outputResults: ""
                      effectiveDate: 2025-08-29T00:00:00.000Z
          - validation:
              shortName: PIY-06
              description: Have a dedicated staff and budget for security with executive support, commensurate with the size, complexity, scope, and risk of the service offering
              implementation:
              - >
                Title: Information Security Resources

                Content: Quarterly, the @ISSO submits an information security budget for approval by the @Operations Admin.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify uses Rippling as a workforce management platform that aids in developing a dedicated staff and budget for security. Personnel are able to be identified based on their department and other factors. Paramify pulled expense information related to information security to allow for review and budgeting for dedicated security spend.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Security Staff - from Rippling
                  description: ""
                  instructions: ""
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Security Staff KSIPI6
                      reference: Security_Staff_KSIPI6.csv
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Rippling report
                      reference: Screenshot 2025-06-16 at 5.24.11 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Untitled Artifact
                      reference: https://app.rippling.com/reports/custom-report/682657819bd93dc63e8ad4d1
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
              - evidence:
                  name: Finance Info Sec Budget
                  description: ""
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Fed Ramp 20X Evidence Sheet1
                      reference: FedRamp 20X evidence - Sheet1.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-08T00:00:00.000Z
          - validation:
              shortName: PIY-07
              description: Document risk management decisions for software supply chain security
              implementation:
              - >
                Title: Trusted Connection Review

                Content: External systems accessing Paramify Cloud must meet Paramify data protection requirements, verified through @Vendor Risk Management Process. The @Vendor Risk Management Admin reviews interconnections on a monthly basis to ensure all interconnections are approved.
              - >
                Title: Custom Response

                Content: Risk management decisions for the FedRAMP environment (including software supply chain security decisions) are documented and tracked as tickets in the self-hosted Change Mangement @GitLab. Decisions are made by the @Change Control Board. 
              - >
                Title: Change Request

                Content: Change proposals for Paramify Cloud are assessed in @GitLab by component owners, encompassing activities and decisions. The @Change Control Board meets weekly and conducts bi-weekly monitoring of the @Change Management Process. Only administrators with @IAM authorization can execute changes.


                The @DevOps Admin tracks and records all releases for Paramify Cloud indefinitely using @GitLab.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify has identified that personnel within the organization are responsible for reviewing and documenting risk management decisions. Evidence of merge requests where approvals take place were provided. Paramify would analyze the nature of the change through the change management process and have the merge request as documentation of the approval.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Paramify CI/CD Pipeline (with scan example)
                  description: >-
                    Paramify CI/CD Pipeline with scans example. See Instructions for detailed explanation of the security components involved in the pipeline.


                    Complete YAML of GitLab pipeline is provided with visualization of steps and example screenshots showing what the process looks like from the DevOps side.
                  instructions: "Paramify CI/CD Pipeline with security scans Paramify's GitLab CI/CD pipeline includes multiple layers of security and change management to ensure software artifacts are secure, policy-compliant, and auditable at every stage of delivery. 1. Hardened Base Images All container images are built using Wolfi base images from Chainguard: image: name: cgr.dev/chainguard/node:22@sha256:... These distroless, minimal images are curated to include zero or minimal known CVEs, significantly reducing the baseline attack surface. 2. Mandatory Security Scanning Security scans are integrated directly into the CI pipeline to enforce vulnerability thresholds before deployment or merging. Static Code Analysis (SAST):Uses Semgrep to detect common coding vulnerabilities: test_sast: image: semgrep/semgrep:latest script: - semgrep ci --config auto npm Dependency Auditing:npm audit checks for vulnerable third-party packages: script: - npm audit --audit-level high - npm audit signatures Container Vulnerability Scanning:Uses Grype with a customized GRYPE_CONFIG to filter false positives while enforcing a --fail-on medium policy: script: - grype --fail-on medium --config ~/grype.yaml \"${ECR_URL}/paramify:${CI_COMMIT_SHORT_SHA}\" Scanning is enforced during the test stage before deployment, ensuring insecure builds do not reach production. 3. Secure Build and Deployment Controls Builds are executed using Kaniko: image: gcr.io/kaniko-project/executor:v1.23.2-debug script: - /kaniko/executor --context=... --destination=... Applications are deployed to Kubernetes via kubectl only on merge to main: deploy_eks: rules: - if: $CI_COMMIT_BRANCH == \"main\" A review environment is spun up dynamically for merge requests and is manually stoppable: deploy_review: environment: name: review/$CI_MERGE_REQUEST_IID-$CI_COMMIT_REF_SLUG url: https://$CI_MERGE_REQUEST_IID.dev.paramify.com Images cannot be pushed to ECR unless they pass all prior vulnerability scans and build stages. 4. Vulnerability Exception and Change Control Process If vulnerabilities are discovered that cannot be immediately remediated (e.g., in upstream npm packages or OS dependencies), a ticket is created in the CloudOps Change Management GitLab, which is:Self-hosted within AWS GovCloud FedRAMP boundary for controlled access. Used to track, review, and approve exceptions and mitigation steps. This ensures:Accountability for deferred patching. Auditability of all risk decisions. Traceability from detection to resolution. Summary This pipeline enforces a “no deploy without remediation” policy through automated scanning, minimal and verified base images, and integrated exception management workflows."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Grype Paramify 2024 09 26
                      reference: grype_paramify_2024-09-26.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Update Base Image To 20240930 Middot Merge Requests Middot Paramify Paramify Middot Git Lab
                      reference: Update base image to 20240930 (50) middot Merge requests middot Paramify _ paramify middot GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: CI/CD pipeline visualization
                      reference: Screenshot 2025-06-30 at 5.07.32 PM.png
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: CI/CD Pipeline (machine-readable code)
                      reference: ci-cd-pipeline.yaml
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
              - evidence:
                  name: Change Management GitLab (CloudOps Self-hosted)
                  description: Change Management GitLab (CloudOps Self-hosted)
                  instructions: "🔒 Change Management GitLab (Self-Hosted in Boundary) Paramify maintains a self-hosted GitLab instance dedicated to Change Management, isolated within the AWS GovCloud FedRAMP boundary to ensure controlled access and traceability. This GitLab tracks and manages all version upgrades, infrastructure changes, and security patching activities, such as: Upgrading Amazon EKS clusters Updating SentinelOne agents Modifying WAF rules Creating or rotating Okta API tokens Each Change Request is submitted as a merge request, following a structured template to ensure review consistency and audit readiness. 🔗 Current Change Requests: Log in to https://gitlab.paramify.com/cloudops/change-management/-/merge_requests to view active and historical change requests. A machine-readable Change Management Merge Requests XML Feed is also available for programmatic access or audit ingestion. 🔐 Access Control Access to the Change Management GitLab is tightly restricted: AWS VPN connection required Okta authentication with Yubikey MFA Only CloudOps team members explicitly approved for GitLab access are granted permissions This ensures segregation of duties, strong identity verification, and controlled change authorization. Change Request Ticket Fields Each ticket (merge request) includes the following standardized fields: Field Description Title & Summary Short description of the change (e.g., “Upgrade SentinelOne Agent”) Scope Affected systems: Helm deployments, Terraform code, or manual steps Impact Rating Risk classification: C1 (High) to C4 (No/Low Impact) Requested Changes Technical rationale and proposed action Impact & Security Analysis Review of risk exposure and mitigations Schedule Planned date/time for implementation Deployment & Rollback Plan Precise steps to apply and undo the change, if needed Results Outcome: successful, failed, or rescheduled Approval Workflow (CCB Process) Merge requests are blocked until explicitly approved by a member of the Change Control Board (CCB) After CCB approval, changes are deployed and verified, and the merge request is then closed to complete the workflow This process ensures:Traceability from detection to resolution Accountability for deferred patching and production changes Auditability across infrastructure and application changes 🔍 Example: SVG Upload WAF Rule Change Title: Update WAF rules to allow SVG file uploads Scope: Other (manual changes) Impact: C3 – Low Impact/Risk, requires manual WAF rule update Security Analysis: Adds MIME-type exception for SVG, constrained via custom AWS WAF rule Schedule: 06/20/2025 @ 3PM Deployment Steps: Modify AWSManagedRulesCommonRuleSet + Add custom override rule Approval: ✅ CCB Approved Result: ✅ Change completed successfully 📌 Summary This Change Management system provides: A formal and structured process for approving all changes to code, configuration, and infrastructure Controlled access, limited to CloudOps personnel with Okta/Yubikey and VPN Full audit trails for compliance with FedRAMP, CMMC, SOC 2, and internal governance standards"
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: "Merge Requests list URL "
                      reference: https://gitlab.paramify.com/cloudops/change-management/-/merge_requests/?sort=created_date&state=all&first_page_size=20
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Merge Requests List
                      reference: Merge Requests list.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Git Lab
                      reference: Change Management GitLab.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Example Change Request Create Okta API Token (New User And Token) (!48) · Merge Requests · Paramify Cloud Ops Change Management · Git Lab
                      reference: Example Change Request - Create Okta API Token (new user and token) (!48) · Merge requests · Paramify CloudOps _ Change Management · GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Merge Requests (XML)
                      reference: change_management_merge_requests.xml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
      - KSI:
          name: Third Party Information Resources
          shortName: TPR
          Validations:
          - validation:
              shortName: TPR-01
              description: Identify all third-party information resources
              implementation:
              - >
                Title: Third-Party Assurance Review

                Content: The @Vendor Risk Management Admin annually reviews third-party assurance reports of vendors hosting customer data to ensure compliance with Paramify security requirements, including contingency requirements. If gaps are found, management takes action to address their impact.
              - >
                Title: Trusted Connection Service Level Agreement

                Content: Paramify requires a formal @Interconnection Agreement to be in place with Third Parties that have a network interconnection with Paramify Cloud. The agreement details restrictions and responsibilities. Agreement reviews are done annually as part of the internal security and third-party assessments.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify documents systems, ports, protocols, and services within the program overview section of Paramify Cloud. Paramify also documents the leveraged authorizations as AWS, AWS GovCloud, Google Workspace, KnowBe4, Okta IDaaS GHC, SentinelOne Singularity Platform High, and Slack also within the same section of Paramify Cloud.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: System Ports, Protocols & Services
                  description: System Ports, Protocols & Services
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: System Ports, Protocols Services
                      reference: System Ports, Protocols & Services.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Leveraged Authorizations
                  description: Leveraged Authorizations
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Leveraged Authorizations
                      reference: Leveraged Authorizations.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
          - validation:
              shortName: TPR-02
              description: Regularly confirm that services handling federal information or are likely to impact the confidentiality, integrity, or availability of federal information are FedRAMP authorized and securely configured
              implementation:
              - >
                Title: Trusted Connection Service Level Agreement

                Content: Paramify requires a formal @Interconnection Agreement to be in place with Third Parties that have a network interconnection with Paramify Cloud. The agreement details restrictions and responsibilities. Agreement reviews are done annually as part of the internal security and third-party assessments.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify documents the leveraged authorizations within Paramify Cloud. This allows for the review of these services to ensure that meet handling requirements. This will also allow for analysis to take place on whether or not the service is FedRAMP authorized.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Leveraged Authorizations
                  description: Leveraged Authorizations
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Leveraged Authorizations
                      reference: Leveraged Authorizations.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Paramify Boundary Diagram
                  description: Paramify Boundary Diagram
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Paramify Boundary Diagram
                      reference: Paramify-Boundary-Diagram.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
          - validation:
              shortName: TPR-03
              description: Identify and prioritize mitigation of potential supply chain risks
              implementation:
              - >
                Title: Third-Party Assurance Review

                Content: The @Vendor Risk Management Admin annually reviews third-party assurance reports of vendors hosting customer data to ensure compliance with Paramify security requirements, including contingency requirements. If gaps are found, management takes action to address their impact.
              - >
                Title: Approved Software Enforcement

                Content: Paramify only allows approved software in the Paramify Cloud environment. All software must receive approval from the @Change Control Board through the @Change Management Process. Approved Software must pass an integrity check as part of the deployment. Infrastructure services are deployed via @Terraform, and applications are deployed with @EKS using @Helm.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify reviews third-party assurance reports of vendors hosting customer data for compliance with security and contingency requirements as part of supply chain activities. Paramify performs analysis and testing of changes that are documented in merge requests. This serves to mitigate supply chain risks by identifying potential issues before reaching production.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Change Management GitLab (CloudOps Self-hosted)
                  description: Change Management GitLab (CloudOps Self-hosted)
                  instructions: "🔒 Change Management GitLab (Self-Hosted in Boundary) Paramify maintains a self-hosted GitLab instance dedicated to Change Management, isolated within the AWS GovCloud FedRAMP boundary to ensure controlled access and traceability. This GitLab tracks and manages all version upgrades, infrastructure changes, and security patching activities, such as: Upgrading Amazon EKS clusters Updating SentinelOne agents Modifying WAF rules Creating or rotating Okta API tokens Each Change Request is submitted as a merge request, following a structured template to ensure review consistency and audit readiness. 🔗 Current Change Requests: Log in to https://gitlab.paramify.com/cloudops/change-management/-/merge_requests to view active and historical change requests. A machine-readable Change Management Merge Requests XML Feed is also available for programmatic access or audit ingestion. 🔐 Access Control Access to the Change Management GitLab is tightly restricted: AWS VPN connection required Okta authentication with Yubikey MFA Only CloudOps team members explicitly approved for GitLab access are granted permissions This ensures segregation of duties, strong identity verification, and controlled change authorization. Change Request Ticket Fields Each ticket (merge request) includes the following standardized fields: Field Description Title & Summary Short description of the change (e.g., “Upgrade SentinelOne Agent”) Scope Affected systems: Helm deployments, Terraform code, or manual steps Impact Rating Risk classification: C1 (High) to C4 (No/Low Impact) Requested Changes Technical rationale and proposed action Impact & Security Analysis Review of risk exposure and mitigations Schedule Planned date/time for implementation Deployment & Rollback Plan Precise steps to apply and undo the change, if needed Results Outcome: successful, failed, or rescheduled Approval Workflow (CCB Process) Merge requests are blocked until explicitly approved by a member of the Change Control Board (CCB) After CCB approval, changes are deployed and verified, and the merge request is then closed to complete the workflow This process ensures:Traceability from detection to resolution Accountability for deferred patching and production changes Auditability across infrastructure and application changes 🔍 Example: SVG Upload WAF Rule Change Title: Update WAF rules to allow SVG file uploads Scope: Other (manual changes) Impact: C3 – Low Impact/Risk, requires manual WAF rule update Security Analysis: Adds MIME-type exception for SVG, constrained via custom AWS WAF rule Schedule: 06/20/2025 @ 3PM Deployment Steps: Modify AWSManagedRulesCommonRuleSet + Add custom override rule Approval: ✅ CCB Approved Result: ✅ Change completed successfully 📌 Summary This Change Management system provides: A formal and structured process for approving all changes to code, configuration, and infrastructure Controlled access, limited to CloudOps personnel with Okta/Yubikey and VPN Full audit trails for compliance with FedRAMP, CMMC, SOC 2, and internal governance standards"
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: "Merge Requests list URL "
                      reference: https://gitlab.paramify.com/cloudops/change-management/-/merge_requests/?sort=created_date&state=all&first_page_size=20
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Merge Requests List
                      reference: Merge Requests list.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Git Lab
                      reference: Change Management GitLab.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Example Change Request Create Okta API Token (New User And Token) (!48) · Merge Requests · Paramify Cloud Ops Change Management · Git Lab
                      reference: Example Change Request - Create Okta API Token (new user and token) (!48) · Merge requests · Paramify CloudOps _ Change Management · GitLab.pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: Change Management Merge Requests (XML)
                      reference: change_management_merge_requests.xml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: Leveraged Authorizations
                  description: Leveraged Authorizations
                  instructions: ""
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Leveraged Authorizations
                      reference: Leveraged Authorizations.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Third Party Vulnerability Notifications
                  description: Paramify actively monitors upstream vulnerabilities through CISA KEV alerts, vendor notifications (e.g., GitLab, SentinelOne), and AWS service notices, ensuring timely patching or documented exceptions via our Change Management GitLab.
                  instructions: "Third-Party Software Vulnerability Monitoring and Notification In addition to the CI/CD pipeline process that scans for vulnerabilities, Paramify receives notifications of vulnerabilities from several third-party information sources to ensure timely remediation or risk-based tracking. CISA KEV Alerts The InfoSec team subscribes to CISA’s Known Exploited Vulnerabilities (KEV) Catalog updates at infosec@paramify.com. These provide early notification of vulnerabilities under active exploitation. 🗎 Evidence: [CISA Alert - July 1, 2025: Two new CVEs added to KEV Catalog] Vendor Security Bulletins Paramify receives direct email alerts from key vendors such as GitLab and SentinelOne regarding patch releases or security updates. These notifications are monitored and triaged by the CloudOps and InfoSec teams. 🗎 Evidence: [GitLab Patch Release Notification - 17.4.1, 17.3.4, 17.2.8] These are surfaced in the AWS Console or Security Hub and routed to CloudOps for triage and remediation planning.RDS database engine upgrades EKS cluster version end-of-life Required patches for underlying services 🗎 Evidence: [EKS Pre/Prod Updates] Response & Escalation Workflow When a relevant upstream vulnerability is identified: If a vulnerability cannot be addressed promptly (e.g., due to third-party library constraints), a ticket is created in the Change Management GitLab to: Document the issue Justify the risk decision Track it to remediation or replacement 🔗 GitLab access: Self-hosted Change Management GitLab 🔒 Access restricted via AWS VPN + Okta + Yubikey, limited to approved CloudOps personnel."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: CISA Adds Two Known Exploited Vulnerabilities To Catalog
                      reference: CISA Adds Two Known Exploited Vulnerabilities to Catalog.eml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Paramify Mail CISA Adds Two Known Exploited Vulnerabilities To Catalog
                      reference: Paramify Mail - CISA Adds Two Known Exploited Vulnerabilities to Catalog.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Sentinel One New Agent Package Available
                      reference: SentinelOne - New Agent Package Available.eml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Paramify Mail Sentinel One New Agent Package Available
                      reference: Paramify Mail - SentinelOne - New Agent Package Available.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: GitLab security releases (patches) RSS feed
                      reference: https://about.gitlab.com/security-releases.xml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Paramify Mail Git Lab Patch Release 17 4 1, 17 3 4, 17 2 8
                      reference: Paramify Mail - GitLab Patch Release_ 17.4.1, 17.3.4, 17.2.8.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Git Lab Patch Release 17 4 1, 17 3 4, 17 2 8
                      reference: GitLab Patch Release_ 17.4.1, 17.3.4, 17.2.8.eml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: EKS Prod Updates
                      reference: Screenshot 2025-07-01 at 3.17.43 PM.png
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: EKS Pre Updates
                      reference: Screenshot 2025-07-01 at 3.16.24 PM.png
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
          - validation:
              shortName: TPR-04
              description: Monitor third party software information resources for upstream vulnerabilities, with contractual notification requirements or active monitoring services
              implementation:
              - >
                Title: Supply Chain Component Approval

                Content: When a Paramify team seeks budget for services, they must outline functional requirements and conduct a cost-benefit analysis to decide between external vendors or internal development. 

                If opting for a vendor, the @Vendor Risk Management Admin evaluates risks for compliance with Paramify Cloud's supply chain standards. 

                Following the @Vendor Risk Management Admin's approval, the @Operations Admin grants final authorization for procuring the services.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Monitoring of third-party services takes place through vendor evaluation and review/approval from an admin. There is the existing merge request process that involves testing, reviews, and approvals to take place to address initial issues. SentinelOne is running in the environment to detect any issues. SentinelOne has their own security feed that updates to support detection of vulnerabilities. Evidence was provided that Paramify gets email notification from SentinelOne when there is a new agent package available.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Third Party Vulnerability Notifications
                  description: Paramify actively monitors upstream vulnerabilities through CISA KEV alerts, vendor notifications (e.g., GitLab, SentinelOne), and AWS service notices, ensuring timely patching or documented exceptions via our Change Management GitLab.
                  instructions: "Third-Party Software Vulnerability Monitoring and Notification In addition to the CI/CD pipeline process that scans for vulnerabilities, Paramify receives notifications of vulnerabilities from several third-party information sources to ensure timely remediation or risk-based tracking. CISA KEV Alerts The InfoSec team subscribes to CISA’s Known Exploited Vulnerabilities (KEV) Catalog updates at infosec@paramify.com. These provide early notification of vulnerabilities under active exploitation. 🗎 Evidence: [CISA Alert - July 1, 2025: Two new CVEs added to KEV Catalog] Vendor Security Bulletins Paramify receives direct email alerts from key vendors such as GitLab and SentinelOne regarding patch releases or security updates. These notifications are monitored and triaged by the CloudOps and InfoSec teams. 🗎 Evidence: [GitLab Patch Release Notification - 17.4.1, 17.3.4, 17.2.8] These are surfaced in the AWS Console or Security Hub and routed to CloudOps for triage and remediation planning.RDS database engine upgrades EKS cluster version end-of-life Required patches for underlying services 🗎 Evidence: [EKS Pre/Prod Updates] Response & Escalation Workflow When a relevant upstream vulnerability is identified: If a vulnerability cannot be addressed promptly (e.g., due to third-party library constraints), a ticket is created in the Change Management GitLab to: Document the issue Justify the risk decision Track it to remediation or replacement 🔗 GitLab access: Self-hosted Change Management GitLab 🔒 Access restricted via AWS VPN + Okta + Yubikey, limited to approved CloudOps personnel."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: CISA Adds Two Known Exploited Vulnerabilities To Catalog
                      reference: CISA Adds Two Known Exploited Vulnerabilities to Catalog.eml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Paramify Mail CISA Adds Two Known Exploited Vulnerabilities To Catalog
                      reference: Paramify Mail - CISA Adds Two Known Exploited Vulnerabilities to Catalog.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Sentinel One New Agent Package Available
                      reference: SentinelOne - New Agent Package Available.eml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Paramify Mail Sentinel One New Agent Package Available
                      reference: Paramify Mail - SentinelOne - New Agent Package Available.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: GitLab security releases (patches) RSS feed
                      reference: https://about.gitlab.com/security-releases.xml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Paramify Mail Git Lab Patch Release 17 4 1, 17 3 4, 17 2 8
                      reference: Paramify Mail - GitLab Patch Release_ 17.4.1, 17.3.4, 17.2.8.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Git Lab Patch Release 17 4 1, 17 3 4, 17 2 8
                      reference: GitLab Patch Release_ 17.4.1, 17.3.4, 17.2.8.eml
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: EKS Prod Updates
                      reference: Screenshot 2025-07-01 at 3.17.43 PM.png
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: EKS Pre Updates
                      reference: Screenshot 2025-07-01 at 3.16.24 PM.png
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
      - KSI:
          name: Cybersecurity Education
          shortName: CED
          Validations:
          - validation:
              shortName: CED-01
              description: Ensure all employees receive security awareness training
              implementation:
              - >
                Title: Security Awareness Training

                Content: Paramify mandates security training with @KnowBe4 before access to Paramify Cloud. The training covers basic security principles, social engineering risks, supply chain risks, credential protection and remote access risk. This training is updated and documented annually, or when events dictate a revision of content. Employees' training records are kept in @Rippling for at least five years.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Evidence of training start date and completion date is identified for users of Paramify Cloud. This is collected as a JSON output from the training provider.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: KnowBe4 Security Awareness Training
                  description: Script for pulling KnowBe4 Security Awareness Training data
                  instructions: '1. Get all users from KnowBe4 API `curl -H "Authorization: Bearer $API_KEY" https://us.api.knowbe4.com/v1/users` 2. Get all training enrollments `curl -H "Authorization: Bearer $API_KEY" https://us.api.knowbe4.com/v1/training/enrollments` Output: Creates unique JSON file and appends to Training-and-Awareness files'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/security_awareness_training.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Training And Awareness
                      reference: Training-and-Awareness.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Training And Awareness
                      reference: Training-and-Awareness.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
                  - artifact:
                      name: Security Awareness Training
                      reference: security_awareness_training.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
          - validation:
              shortName: CED-02
              description: Require role-specific training for high risk roles, including at least roles with privileged access
              implementation:
              - >
                Title: Role Based Security Training

                Content: Paramify documents security procedures and checklists in @Google Drive for engineering roles. Managers review documentation on specific role responsibilities before access is granted to Paramify Cloud, in addition to basic security awareness training.
              - >+
                Title: Anti-counterfeit Training

                Content: Within 10 days of assignment, Paramify staff that have roles with access to Paramify Cloud receive role-specific training through review of the @Supply Chain Risk Management Plan. This training is updated and documented annually, or when supply chain risk events dictate a revision of content.


              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Evidence of role-based specific training is captured in JSON output from the training provider. The user who completed the training is identified through an ID.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: KnowBe4 Role Specific Training
                  description: Script for pulling KnowBe4 Role Based Training data
                  instructions: '1. Get all users from KnowBe4 API `curl -H "Authorization: Bearer $API_KEY" https://us.api.knowbe4.com/v1/users` 2. Get all training campaigns `curl -H "Authorization: Bearer $API_KEY" https://us.api.knowbe4.com/v1/training/campaigns` 3. Get all training enrollments `curl -H "Authorization: Bearer $API_KEY" https://us.api.knowbe4.com/v1/training/enrollments` 4. Get all groups and their members `curl -H "Authorization: Bearer $API_KEY" https://us.api.knowbe4.com/v1/groups` `curl -H "Authorization: Bearer $API_KEY" https://us.api.knowbe4.com/v1/groups/{group_id}/members`'
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/role_specific_training.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Role Specific Training
                      reference: role_specific_training.json
                      outputResults: ""
                      effectiveDate: 2025-06-18T00:00:00.000Z
      - KSI:
          name: Recovery Planning
          shortName: RPL
          Validations:
          - validation:
              shortName: RPL-01
              description: Define Recovery Time Objectives (RTO) and Recovery Point Objectives (RPO)
              implementation:
              - >
                Title: Recovery Objectives

                Content: Paramify considers Paramify Cloud product portions highly available with a 2-hour recovery-time objective (RTO) and 24-hour Recovery Point Objective (RPO). Administrative portions managed by Cloud Service Providers with SLAs for service availability.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify has defined a Recovery Time Objective (RTO) of 1 hour. The Recovery Point Objective (RPO) is identified as 24 hours within the Information System Contingency Plan (ISCP).
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: "Paramify Contingency Plan "
                  description: SSP ATTACHMENT 6 – FedRAMP Information System Contingency Plan
                  instructions: "Paramify Cloud Information System Contingency Plan (ISCP) – Version 1.0 This ISCP serves as Appendix G and the FedRAMP Information System Contingency Plan (ISCP) for Paramify Cloud, version 1.0, dated September 30, 2024. It was prepared by Paramify to outline comprehensive procedures for recovering Paramify Cloud following a service disruption. The plan aims to restore operations efficiently, minimize reliance on manual workarounds, and ensure continued availability of this High-impact system. Key Elements of the Plan: Purpose and Scope: Establishes a structured recovery process for Paramify Cloud services. Applies to Paramify Cloud, a High (H) impact system. Recovery Time Objective (RTO): 2 hours (activation threshold). Recovery Point Objective (RPO): 24 hours. Maximum Tolerable Downtime (MTD): 48 hours. Excludes short-term outages (<2 hours), end-user equipment, and non-critical data loss. Phases of Recovery: Activation and Notification: Initiated when downtime is projected to exceed the 2-hour RTO. Triggers stakeholder notifications and an outage assessment. Authorized personnel include Kenny Scott (CPD) and Mike Cook (CPC). Recovery: Encompasses identifying alternate processing sites, retrieving backups, restoring hardware/software components, and validating system/data integrity. Reconstitution: Includes system testing, restoration to the original or permanent site, user notification, backup of recovered systems, and documentation of the event. The CPC formally declares recovery. Backup and Site Readiness: Daily incremental and weekly full backups using AWS Backup Manager, S3, and RDS, retained for at least 90 days. Backup types include Full, Differential, Incremental, and Mirror. Offsite storage is AWS GovCloud (US). Paramify Cloud operates across multiple hot sites: AWS GovCloud West 1a, West 1b, and East 1a. Roles and Responsibilities: Key roles include:Contingency Planning Director (CPD) Contingency Planning Coordinator (CPC) Outage and Damage Assessment Lead (ODAL) Hardware and Software Recovery Teams Telecommunications, Security, Logistics Coordinators Technical Administrators and Incident Response Team (IRT) All personnel are trained annually. Testing and Maintenance: The ISCP is tested annually, with test results documented in a Contingency Plan Test Report. Lessons learned and proposed changes are recorded following each test or real-world activation. Appendices: Contact information for key staff (e.g., Isaac Teuscher – Alternate CPC), vendor contacts (AWS, SentinelOne, GitLab), alternate site details, and the Business Impact Analysis (BIA). Approval: The plan was reviewed and signed by Kenny Scott (CPD), Michael W. Cook (CPC), and Brad Bartholomew on September 30, 2024."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Contingency Plan (Google Drive Link)
                      reference: https://docs.google.com/document/d/1DBgFyqsL0zqnziH1VqutyFLYk0eTXN1LoZzz8bnMMD0/edit?usp=sharing
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Business Impact Analysis - page 28
                      reference: Screenshot 2025-07-01 at 11.51.59 AM.png
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: "Paramify Contingency Plan "
                      reference: SSP-Appendix-G-Information-System-Contingency-Plan-(ISCP)-Paramify.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: "Paramify Contingency Plan "
                  description: SSP ATTACHMENT 6 – FedRAMP Information System Contingency Plan
                  instructions: "Paramify Cloud Information System Contingency Plan (ISCP) – Version 1.0 This ISCP serves as Appendix G and the FedRAMP Information System Contingency Plan (ISCP) for Paramify Cloud, version 1.0, dated September 30, 2024. It was prepared by Paramify to outline comprehensive procedures for recovering Paramify Cloud following a service disruption. The plan aims to restore operations efficiently, minimize reliance on manual workarounds, and ensure continued availability of this High-impact system. Key Elements of the Plan: Purpose and Scope: Establishes a structured recovery process for Paramify Cloud services. Applies to Paramify Cloud, a High (H) impact system. Recovery Time Objective (RTO): 2 hours (activation threshold). Recovery Point Objective (RPO): 24 hours. Maximum Tolerable Downtime (MTD): 48 hours. Excludes short-term outages (<2 hours), end-user equipment, and non-critical data loss. Phases of Recovery: Activation and Notification: Initiated when downtime is projected to exceed the 2-hour RTO. Triggers stakeholder notifications and an outage assessment. Authorized personnel include Kenny Scott (CPD) and Mike Cook (CPC). Recovery: Encompasses identifying alternate processing sites, retrieving backups, restoring hardware/software components, and validating system/data integrity. Reconstitution: Includes system testing, restoration to the original or permanent site, user notification, backup of recovered systems, and documentation of the event. The CPC formally declares recovery. Backup and Site Readiness: Daily incremental and weekly full backups using AWS Backup Manager, S3, and RDS, retained for at least 90 days. Backup types include Full, Differential, Incremental, and Mirror. Offsite storage is AWS GovCloud (US). Paramify Cloud operates across multiple hot sites: AWS GovCloud West 1a, West 1b, and East 1a. Roles and Responsibilities: Key roles include:Contingency Planning Director (CPD) Contingency Planning Coordinator (CPC) Outage and Damage Assessment Lead (ODAL) Hardware and Software Recovery Teams Telecommunications, Security, Logistics Coordinators Technical Administrators and Incident Response Team (IRT) All personnel are trained annually. Testing and Maintenance: The ISCP is tested annually, with test results documented in a Contingency Plan Test Report. Lessons learned and proposed changes are recorded following each test or real-world activation. Appendices: Contact information for key staff (e.g., Isaac Teuscher – Alternate CPC), vendor contacts (AWS, SentinelOne, GitLab), alternate site details, and the Business Impact Analysis (BIA). Approval: The plan was reviewed and signed by Kenny Scott (CPD), Michael W. Cook (CPC), and Brad Bartholomew on September 30, 2024."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Contingency Plan (Google Drive Link)
                      reference: https://docs.google.com/document/d/1DBgFyqsL0zqnziH1VqutyFLYk0eTXN1LoZzz8bnMMD0/edit?usp=sharing
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Business Impact Analysis - page 28
                      reference: Screenshot 2025-07-01 at 11.51.59 AM.png
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: "Paramify Contingency Plan "
                      reference: SSP-Appendix-G-Information-System-Contingency-Plan-(ISCP)-Paramify.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: Paramify BetterStack Status Monitoring
                  description: Paramify provides real-time service availability updates at status.paramify.com, powered by Better Stack.
                  instructions: "Paramify Status Monitoring Summary Paramify provides real-time service availability updates at status.paramify.com, powered by Better Stack. As of July 1st, 12:08 PM MDT, all services are operational. Homepage: 100.000% uptime over the past 90 days. Paramify Platform: 99.991% uptime, with a few minor service interruptions indicated. Maintenance History (Past 3 Months) April 5, 2025: Planned infrastructure updates completed successfully. May & June 2025: No maintenance reported. Incident History May–July 2025: No incidents reported. This transparent uptime and maintenance reporting supports Paramify’s commitment to reliability and service continuity."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://status.paramify.com/
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Paramify Status July 1, 2025
                      reference: Paramify status July 1, 2025.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
          - validation:
              shortName: RPL-02
              description: Develop and maintain a recovery plan that aligns with the defined recovery objectives
              implementation:
              - >
                Title: Critical Business Functions

                Content: Paramify identifies critical assets as Paramify Cloud production environment components. These components support critical business functions and essential missions and are documented in the @Contingency Plan with assigned recovery objectives. 
              - >
                Title: Contingency Plan

                Content: Paramify has designed a @Contingency Plan to ensure Paramify Cloud can continue operations during a disaster. Personnel follow defined roles, responsibilities, and procedures, utilizing multiple availability zones from FedRAMP 20x-compliant cloud platforms. The @GRC Admin maintains the @Contingency Plan, updated annually, and shared with relevant personnel. Stakeholders are notified via email of any updates or changes, and access is approved by the @GRC Admin.
              - >
                Title: Recovery Objectives

                Content: Paramify considers Paramify Cloud product portions highly available with a 2-hour recovery-time objective (RTO) and 24-hour Recovery Point Objective (RPO). Administrative portions managed by Cloud Service Providers with SLAs for service availability.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify has identified the objectives for the contingency plan and has created a FedRAMP ISCP, version 1.0, dated 9/30/2024.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: "Paramify Contingency Plan "
                  description: SSP ATTACHMENT 6 – FedRAMP Information System Contingency Plan
                  instructions: "Paramify Cloud Information System Contingency Plan (ISCP) – Version 1.0 This ISCP serves as Appendix G and the FedRAMP Information System Contingency Plan (ISCP) for Paramify Cloud, version 1.0, dated September 30, 2024. It was prepared by Paramify to outline comprehensive procedures for recovering Paramify Cloud following a service disruption. The plan aims to restore operations efficiently, minimize reliance on manual workarounds, and ensure continued availability of this High-impact system. Key Elements of the Plan: Purpose and Scope: Establishes a structured recovery process for Paramify Cloud services. Applies to Paramify Cloud, a High (H) impact system. Recovery Time Objective (RTO): 2 hours (activation threshold). Recovery Point Objective (RPO): 24 hours. Maximum Tolerable Downtime (MTD): 48 hours. Excludes short-term outages (<2 hours), end-user equipment, and non-critical data loss. Phases of Recovery: Activation and Notification: Initiated when downtime is projected to exceed the 2-hour RTO. Triggers stakeholder notifications and an outage assessment. Authorized personnel include Kenny Scott (CPD) and Mike Cook (CPC). Recovery: Encompasses identifying alternate processing sites, retrieving backups, restoring hardware/software components, and validating system/data integrity. Reconstitution: Includes system testing, restoration to the original or permanent site, user notification, backup of recovered systems, and documentation of the event. The CPC formally declares recovery. Backup and Site Readiness: Daily incremental and weekly full backups using AWS Backup Manager, S3, and RDS, retained for at least 90 days. Backup types include Full, Differential, Incremental, and Mirror. Offsite storage is AWS GovCloud (US). Paramify Cloud operates across multiple hot sites: AWS GovCloud West 1a, West 1b, and East 1a. Roles and Responsibilities: Key roles include:Contingency Planning Director (CPD) Contingency Planning Coordinator (CPC) Outage and Damage Assessment Lead (ODAL) Hardware and Software Recovery Teams Telecommunications, Security, Logistics Coordinators Technical Administrators and Incident Response Team (IRT) All personnel are trained annually. Testing and Maintenance: The ISCP is tested annually, with test results documented in a Contingency Plan Test Report. Lessons learned and proposed changes are recorded following each test or real-world activation. Appendices: Contact information for key staff (e.g., Isaac Teuscher – Alternate CPC), vendor contacts (AWS, SentinelOne, GitLab), alternate site details, and the Business Impact Analysis (BIA). Approval: The plan was reviewed and signed by Kenny Scott (CPD), Michael W. Cook (CPC), and Brad Bartholomew on September 30, 2024."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Contingency Plan (Google Drive Link)
                      reference: https://docs.google.com/document/d/1DBgFyqsL0zqnziH1VqutyFLYk0eTXN1LoZzz8bnMMD0/edit?usp=sharing
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Business Impact Analysis - page 28
                      reference: Screenshot 2025-07-01 at 11.51.59 AM.png
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: "Paramify Contingency Plan "
                      reference: SSP-Appendix-G-Information-System-Contingency-Plan-(ISCP)-Paramify.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: Paramify BetterStack Status Monitoring
                  description: Paramify provides real-time service availability updates at status.paramify.com, powered by Better Stack.
                  instructions: "Paramify Status Monitoring Summary Paramify provides real-time service availability updates at status.paramify.com, powered by Better Stack. As of July 1st, 12:08 PM MDT, all services are operational. Homepage: 100.000% uptime over the past 90 days. Paramify Platform: 99.991% uptime, with a few minor service interruptions indicated. Maintenance History (Past 3 Months) April 5, 2025: Planned infrastructure updates completed successfully. May & June 2025: No maintenance reported. Incident History May–July 2025: No incidents reported. This transparent uptime and maintenance reporting supports Paramify’s commitment to reliability and service continuity."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://status.paramify.com/
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Paramify Status July 1, 2025
                      reference: Paramify status July 1, 2025.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: "Paramify Contingency Plan "
                  description: SSP ATTACHMENT 6 – FedRAMP Information System Contingency Plan
                  instructions: "Paramify Cloud Information System Contingency Plan (ISCP) – Version 1.0 This ISCP serves as Appendix G and the FedRAMP Information System Contingency Plan (ISCP) for Paramify Cloud, version 1.0, dated September 30, 2024. It was prepared by Paramify to outline comprehensive procedures for recovering Paramify Cloud following a service disruption. The plan aims to restore operations efficiently, minimize reliance on manual workarounds, and ensure continued availability of this High-impact system. Key Elements of the Plan: Purpose and Scope: Establishes a structured recovery process for Paramify Cloud services. Applies to Paramify Cloud, a High (H) impact system. Recovery Time Objective (RTO): 2 hours (activation threshold). Recovery Point Objective (RPO): 24 hours. Maximum Tolerable Downtime (MTD): 48 hours. Excludes short-term outages (<2 hours), end-user equipment, and non-critical data loss. Phases of Recovery: Activation and Notification: Initiated when downtime is projected to exceed the 2-hour RTO. Triggers stakeholder notifications and an outage assessment. Authorized personnel include Kenny Scott (CPD) and Mike Cook (CPC). Recovery: Encompasses identifying alternate processing sites, retrieving backups, restoring hardware/software components, and validating system/data integrity. Reconstitution: Includes system testing, restoration to the original or permanent site, user notification, backup of recovered systems, and documentation of the event. The CPC formally declares recovery. Backup and Site Readiness: Daily incremental and weekly full backups using AWS Backup Manager, S3, and RDS, retained for at least 90 days. Backup types include Full, Differential, Incremental, and Mirror. Offsite storage is AWS GovCloud (US). Paramify Cloud operates across multiple hot sites: AWS GovCloud West 1a, West 1b, and East 1a. Roles and Responsibilities: Key roles include:Contingency Planning Director (CPD) Contingency Planning Coordinator (CPC) Outage and Damage Assessment Lead (ODAL) Hardware and Software Recovery Teams Telecommunications, Security, Logistics Coordinators Technical Administrators and Incident Response Team (IRT) All personnel are trained annually. Testing and Maintenance: The ISCP is tested annually, with test results documented in a Contingency Plan Test Report. Lessons learned and proposed changes are recorded following each test or real-world activation. Appendices: Contact information for key staff (e.g., Isaac Teuscher – Alternate CPC), vendor contacts (AWS, SentinelOne, GitLab), alternate site details, and the Business Impact Analysis (BIA). Approval: The plan was reviewed and signed by Kenny Scott (CPD), Michael W. Cook (CPC), and Brad Bartholomew on September 30, 2024."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Contingency Plan (Google Drive Link)
                      reference: https://docs.google.com/document/d/1DBgFyqsL0zqnziH1VqutyFLYk0eTXN1LoZzz8bnMMD0/edit?usp=sharing
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Business Impact Analysis - page 28
                      reference: Screenshot 2025-07-01 at 11.51.59 AM.png
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: "Paramify Contingency Plan "
                      reference: SSP-Appendix-G-Information-System-Contingency-Plan-(ISCP)-Paramify.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: Paramify BetterStack Status Monitoring
                  description: Paramify provides real-time service availability updates at status.paramify.com, powered by Better Stack.
                  instructions: "Paramify Status Monitoring Summary Paramify provides real-time service availability updates at status.paramify.com, powered by Better Stack. As of July 1st, 12:08 PM MDT, all services are operational. Homepage: 100.000% uptime over the past 90 days. Paramify Platform: 99.991% uptime, with a few minor service interruptions indicated. Maintenance History (Past 3 Months) April 5, 2025: Planned infrastructure updates completed successfully. May & June 2025: No maintenance reported. Incident History May–July 2025: No incidents reported. This transparent uptime and maintenance reporting supports Paramify’s commitment to reliability and service continuity."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://status.paramify.com/
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Paramify Status July 1, 2025
                      reference: Paramify status July 1, 2025.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
          - validation:
              shortName: RPL-03
              description: Perform system backups aligned with recovery objectives
              implementation:
              - >
                Title: Backup Recovery: Amazon Simple Storage Service (S3)

                Content: Paramify Cloud uses @S3, a FedRAMP 20x-compliant cloud component that enables automated backups and restoration.


                End User Responsibility: The @DevOps Admin configures Paramify Cloud to utilize multiple zones, with essential information backed up to @S3, allowing for roll back to a known state within 2 hours. The @DevOps Admin has a documented recovery playlist in @Google Drive to aid in coordination of the roll back process.
              - >
                Title: User-Level Data Backup Configuration: Amazon RDS (Postgres)

                Content: Paramify Cloud stores data on @RDS (Postgres) databases, which are part of a FedRAMP 20x-compliant cloud platform.


                End User Responsibility: Paramify backs up all databases containing customer data using real-time incremental and daily full cycle backups across multiple availability zones. Daily records are retained for at least seven days to support rollback. In case of failure, Paramify has a manual switchover process to ensure customer data availability.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Test
                  status: PASS
                  result: Paramify has identified processes for backups within their application. Paramify provided JSON output that details the back up configurations that are in place for system resources. Parameters such as the backup target and retention period are detailed. Backups are being pushed to east-1 which is a different region from the standard operating environment of US West.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: RDS DB and S3 Backup Status
                  description: Automated script to assess the backup configurations and most recent backup of RDS databases in AWS GovCloud.
                  instructions: "Backups: All three RDS instances show clear configuration for automated backups: Instance ID Backup Retention Backup Target Automated Backup Replication Latest Restorable Time paramify-gov-pre-db 7 days region ✅ To us-gov-east-1 2025-06-30T21:14:36+00:00 paramify-gov-pre-gitlab-db 30 days region ✅ To us-gov-east-1 2025-06-30T21:14:34+00:00 paramify-gov-prod-db 30 days region ✅ To us-gov-east-1 2025-06-30T21:14:33+00:00 Evidence of backup capability includes: \"BackupRetentionPeriod\" set (7 or 30 days) \"BackupTarget\": \"region\" (cross-region backups) \"DBInstanceAutomatedBackupsReplications\" with ARNs in us-gov-east-1, supporting cross-region disaster recovery \"LatestRestorableTime\" confirms backups are recent and restorable. High Availability (Multi-AZ): Instance ID Multi-AZ Subnet Distribution Secondary AZ paramify-gov-pre-db ❌ False Subnets in both us-gov-west-1a and 1b N/A paramify-gov-pre-gitlab-db ❌ False Subnets in both us-gov-west-1a and 1b N/A paramify-gov-prod-db ✅ True Subnets in both us-gov-west-1a and 1b us-gov-west-1a Only paramify-gov-prod-db is configured with \"MultiAZ\": true, meaning it has a standby replica in a different Availability Zone for automatic failover. The subnet group on all instances spans two AZs, which is a prerequisite for Multi-AZ, but it's only enabled on the production database. Additional Resilience Notes: All instances have \"StorageEncrypted\": true with a customer-managed KMS key. \"DeletionProtection\": true is enabled for the production and GitLab databases (not for pre-prod DB). Monitoring and performance insights are enabled on most instances, which helps detect and respond to issues early. Summary: Backups: All three instances have backups enabled, retained for 7 or 30 days, and replicated to us-gov-east-1. High Availability (HA):Production DB has Multi-AZ HA enabled. Pre-prod and GitLab are single-AZ but span multi-AZ subnet groups (could be upgraded to HA). Best Practices Observed: Cross-region backups, encryption, performance insights, and deletion protection (on critical DBs)."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Backup Validation (S3 & RDS)
                      reference: backup_validation.json
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: Database High Availability JSON
                      reference: database_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: AWS Resources High Availability Summary
                  description: >-
                    Collection of scripts and evidence relating to High Availability of AWS resources


                    Note: Prod DB is Multi AZ but Pre DB and GitLab self-hosted DB are not multi-AZ because they don't have any customer data and need high uptime.
                  instructions: "Collection of scripts and evidence relating to High Availability of AWS resources Note: RDS Production Database is configured to be multi-az but the other non-production databases (eg: gitaly and pre-prod) are not essential for high availability and thus are not configured to be multi-az."
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Database High Availability
                      reference: database_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Load Balancer High Availability
                      reference: load_balancer_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Aws High Availability
                      reference: aws_high_availability.csv
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Efs High Availability
                      reference: efs_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Backup Recovery High Availability
                      reference: backup_recovery_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Network Resilience High Availability
                      reference: network_resilience_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Aws High Availability
                      reference: aws_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Cloudwatch High Availability
                      reference: cloudwatch_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
                  - artifact:
                      name: Eks High Availability
                      reference: eks_high_availability.json
                      outputResults: ""
                      effectiveDate: 2025-06-30T00:00:00.000Z
          - validation:
              shortName: RPL-04
              description: Regularly test the capability to recover from incidents and contingencies
              implementation:
              - >
                Title: Incident Response Test

                Content: Paramify conducts an annual @Incident Response Test Process, a tabletop exercise selected by the @Incident Response Admin in accordance with NIST SP 800-61. Test results are used to update incident response documentation and processes, investigating any weaknesses discovered during the exercise.

                If a major incident invokes the @Incident Response Plan during the quarterly period between reviews, that incident serves as training in lieu of the annual exercise.
              - >
                Title: Contingency Plan Test

                Content: Paramify Cloud uses @EKS and operates in multiple availability zones. @Contingency Plan Test Process is performed annually and aims to quickly restore system functionality in case of an outage. The test includes a walkthrough, tabletop exercise, advanced tabletop/simulation, or functional exercise. Results are reviewed by the @GRC Admin and @DevOps Admin to determine necessary changes which are tracked for resolution in @GitLab.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify has performed incident response testing and disaster recovery testing to ensure the system is capable of recovering from incidents and contingencies.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Incident Response (Incidents, Tests, & After Action Reports)
                  description: Incident Response Logs, Tests, and After Action Reports
                  instructions: "The \"IR Incidents, Tests, & After Action Reports\" Google Drive folder contains incident response logs, IR tests and after action reports. Currently there have not been any incidents in the FedRAMP boundary necessitating the IR process. There is an incident response test report from November 1, 2024. IR tests are conducted annually and after action reports are written for each incident or incident test. Incident Response Test: The folder contains a report detailing a \"GovCloud Incident Response Test\" conducted on November 1, 2024, in Lehi, UT. The test assessed the effectiveness of coordination, procedures, and notification processes during a security scenario involving malware identification and remediation. Key participants included Isaac Teuscher, Mike Cook, and Brad Bartholomew. The test simulated a malware report from SentinelOne, and SentinelOne Vigilance actively monitored and responded to the event by quarantining and removing the malicious file. Learnings and After Action Items: The report highlights several learnings from the test, such as the need to customize Slack alerts, verify appropriate alert channels, explore restrictions on file uploads, and update notification email addresses. Specific after-action items include Isaac coordinating with SentinelOne on alert customization and verifying the Slack alert channel, Mike working with the product team on file upload restrictions, and Isaac reaching out to SentinelOne Vigilance regarding their notification email address. Incident Response Plan The Incident Response Plan (IRP) outlines Paramify's policies and procedures for addressing computer security incidents, focusing on preparation, detection, analysis, eradication, and containment. Key details from the document include: Prepared by: Paramify, with an initial draft by Brad Bartholomew on September 27, 2024. Approval: Approved by Kenny Scott (CEO), Mike Cook (CTO), and Brad Bartholomew (CISO). Review: The document is to be reviewed annually, with the next review date set for September 27, 2025. Scope: Pertains to Paramify's FedRAMP Authorization and the Paramify Cloud system, particularly incidents affecting service restoration for U.S. government customers. It aligns with NIST 800-61, Rev. 2 guidelines. Incident Response Team (IRT): Composed of various roles, including CISO (functioning as Incident Response Manager), System Owner, CTO, and Corporate Incident Handlers, all with specific responsibilities in the IR process. Isaac Teuscher is listed as the Incident Response Manager. Incident Handling Phases:Preparation: Establishing and training the IRT, developing procedures, and acquiring tools. Detection: Monitoring and acknowledging events, with processes initiated by reports or suspicious activity. Potential event sources include system alerts, logging, anti-virus, publicly available information on vulnerabilities, and reports from internal/external personnel. Analysis: In-depth examination of events to determine if they represent incidents, using an Event Decision Flowchart. This phase also includes external reporting processes to US-CERT and FedRAMP POCs. Containment, Eradication, and Recovery: Actions to limit incident impact, eliminate the problem, restore systems, and remediate vulnerabilities. Post-Incident Activity: Official closure of the incident, documentation, final communications, and identification of lessons learned through Root Cause Analysis (using the \"Five Whys\" method) and After Action Reports. Incident Tracking: Incidents are tracked in the GitLab ITSM Ticketing System, with details such as title, severity, due date, assignees, status, summary, and timeline. Appendices: Include incident handling scenarios and the US-CERT Incident Notification Template, which requires information on functional impact, information impact, recoverability, detection time, systems impacted, network location, point of contact, attack vectors, classification, indicators of compromise, and mitigation activities."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Incident Response Test - 11_1_2024.pdf
                      reference: ""
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Paramify Incident Response Plan (IRP)
                      reference: SSP-A08-Paramify-IRP-2024-09-27 - 9_30_24, 2_14 PM (1).pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: IR Incidents, Tests, & After Action Reports (Google Drive folder)
                      reference: https://drive.google.com/drive/folders/1zDE2ZwVDyih3Is9if6U6aGHdExlXp9Oo?usp=drive_link
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: SentinelOne MDR Scope Of Service
                      reference: MDR Scope of Service - v1.0 (1).pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
              - evidence:
                  name: Disaster Recovery Test Results
                  description: Disaster Recovery Test Results
                  instructions: Paramify performs disaster recovery tests annually to failover from us-gov-west-1 to us-gov-east-2 to support rapid recovery. Paramify's production database is set to multi-az.
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: DR Test Results From 2024 10 24
                      reference: DR Test Results from 2024-10-24 (1).pdf
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
      - KSI:
          name: Incident Reporting
          shortName: INR
          Validations:
          - validation:
              shortName: INR-01
              description: Report incidents according to FedRAMP requirements and cloud service provider policies
              implementation:
              - >+
                Title: Incident Response Reporting Guidelines

                Content: All personnel from Paramify must report any suspected or actual security incidents, including insider threats, to the @Incident Response Admin via email, as indicated in the @Incident Response Plan. Incidents should be reported within 1 hour of discovery, and the timeframes for different incident categories (see table) should be followed, unless the data owner specifies a more restrictive guidance.

                Incident

                Category

                Description

                Impact

                Notification Time Requirement

                1

                Root Level

                Intrusion

                Moderate

                2 Hours

                2

                User Level

                Intrusion

                Moderate

                2 Hours

                3

                Unsuccessful Activity

                Attempt

                N/A

                4 Hours

                4

                Denial of Service

                Attempt

                Mod/High

                15 Minutes

                5

                Non-Compliance

                Activity

                N/A

                4 Hours

                6

                Reconnaissance

                Activity

                N/A

                4 Hours

                7

                Malicious Code

                Logic

                Moderate

                2 Hours


                After formally documenting and discovering an incident, the responding party communicates updates and remediation actions to all appropriate stakeholders. The type of incident determines which stakeholders are notified, including the affected organizations, the @InfoSec Admin, @Operations Admin, and support organizations.

                Stakeholders receive an email from the @Incident Response Admin, including the following information:

                Issue name/identifier

                Summary, impact

                Current status

                Stakeholders

                Affected parties

                Facts to date

                Actions

                How to learn more

                Engagement/Update plan

              - >
                Title: External Communication of Incidents

                Content: After formally discovering and documenting an incident within ticket in @SentinelOne, the @Incident Response Admin communicates updates and remediation actions to

                The @Operations Admin,

                The @Customer Success Engineer,

                The affected external organizations, and

                US-CERT (For Federal Systems).


                All stakeholders are notified via email and collaborate with the @Incident Response Admin to resolve the issue.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: Paramify has developed an Incident Response Plan (IRP), version 1.0, dated 09/27/2024. The process for how incidents are handled and reported is documented within the IRP. Paramify has the capability to track incidents and has established an SLA and incident documentation format.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Incident Response (Incidents, Tests, & After Action Reports)
                  description: Incident Response Logs, Tests, and After Action Reports
                  instructions: "The \"IR Incidents, Tests, & After Action Reports\" Google Drive folder contains incident response logs, IR tests and after action reports. Currently there have not been any incidents in the FedRAMP boundary necessitating the IR process. There is an incident response test report from November 1, 2024. IR tests are conducted annually and after action reports are written for each incident or incident test. Incident Response Test: The folder contains a report detailing a \"GovCloud Incident Response Test\" conducted on November 1, 2024, in Lehi, UT. The test assessed the effectiveness of coordination, procedures, and notification processes during a security scenario involving malware identification and remediation. Key participants included Isaac Teuscher, Mike Cook, and Brad Bartholomew. The test simulated a malware report from SentinelOne, and SentinelOne Vigilance actively monitored and responded to the event by quarantining and removing the malicious file. Learnings and After Action Items: The report highlights several learnings from the test, such as the need to customize Slack alerts, verify appropriate alert channels, explore restrictions on file uploads, and update notification email addresses. Specific after-action items include Isaac coordinating with SentinelOne on alert customization and verifying the Slack alert channel, Mike working with the product team on file upload restrictions, and Isaac reaching out to SentinelOne Vigilance regarding their notification email address. Incident Response Plan The Incident Response Plan (IRP) outlines Paramify's policies and procedures for addressing computer security incidents, focusing on preparation, detection, analysis, eradication, and containment. Key details from the document include: Prepared by: Paramify, with an initial draft by Brad Bartholomew on September 27, 2024. Approval: Approved by Kenny Scott (CEO), Mike Cook (CTO), and Brad Bartholomew (CISO). Review: The document is to be reviewed annually, with the next review date set for September 27, 2025. Scope: Pertains to Paramify's FedRAMP Authorization and the Paramify Cloud system, particularly incidents affecting service restoration for U.S. government customers. It aligns with NIST 800-61, Rev. 2 guidelines. Incident Response Team (IRT): Composed of various roles, including CISO (functioning as Incident Response Manager), System Owner, CTO, and Corporate Incident Handlers, all with specific responsibilities in the IR process. Isaac Teuscher is listed as the Incident Response Manager. Incident Handling Phases:Preparation: Establishing and training the IRT, developing procedures, and acquiring tools. Detection: Monitoring and acknowledging events, with processes initiated by reports or suspicious activity. Potential event sources include system alerts, logging, anti-virus, publicly available information on vulnerabilities, and reports from internal/external personnel. Analysis: In-depth examination of events to determine if they represent incidents, using an Event Decision Flowchart. This phase also includes external reporting processes to US-CERT and FedRAMP POCs. Containment, Eradication, and Recovery: Actions to limit incident impact, eliminate the problem, restore systems, and remediate vulnerabilities. Post-Incident Activity: Official closure of the incident, documentation, final communications, and identification of lessons learned through Root Cause Analysis (using the \"Five Whys\" method) and After Action Reports. Incident Tracking: Incidents are tracked in the GitLab ITSM Ticketing System, with details such as title, severity, due date, assignees, status, summary, and timeline. Appendices: Include incident handling scenarios and the US-CERT Incident Notification Template, which requires information on functional impact, information impact, recoverability, detection time, systems impacted, network location, point of contact, attack vectors, classification, indicators of compromise, and mitigation activities."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Incident Response Test - 11_1_2024.pdf
                      reference: ""
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Paramify Incident Response Plan (IRP)
                      reference: SSP-A08-Paramify-IRP-2024-09-27 - 9_30_24, 2_14 PM (1).pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: IR Incidents, Tests, & After Action Reports (Google Drive folder)
                      reference: https://drive.google.com/drive/folders/1zDE2ZwVDyih3Is9if6U6aGHdExlXp9Oo?usp=drive_link
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: SentinelOne MDR Scope Of Service
                      reference: MDR Scope of Service - v1.0 (1).pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
          - validation:
              shortName: INR-02
              description: Maintain a log of incidents and periodically review past incidents for patterns or vulnerabilities
              implementation:
              - >+
                Title: Prepared Audit Queries: SentinelOne

                Content: Paramify uses @SentinelOne, a FedRAMP 20x-compliant component, for Security Information and Event Management (SIEM).


                End User Responsibility: @SentinelOne allows Paramify to search and link audit records to provide a chain of activities with event investigations. @SentinelOne alerts and health reports include:
                 missing/stopped forwarders,
                 MFA activity,
                 configuration baselines,
                 failed logins,
                 data feed status,
                 external and internal connections monitoring,
                 root/administrative account activity, and
                 permission and object changes.

              - >
                Title: Incident Review Meeting

                Content: Quarterly, the @Incident Response Admin conducts an Incident Review Meeting which includes a review of past incidents for patterns and vulnerabilities. The log of incidents is stored in @Google Drive and shared with the Incident Response team. 
              - >
                Title: Audit Log Collection and Alerts: Amazon CloudTrail

                Content: Paramify Cloud uses @Amazon CloudTrail, a FedRAMP 20x-compliant component that enables robust audit log backup.


                End User Responsibility: The @IT Admin configures @Amazon CloudTrail which records audit logs for all system components. Logs are automatically analyzed by @GuardDuty. Alerts for atypical account usage are triggered automatically in @SentinelOne and reviewed and resolved by the @InfoSec Admin.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: '"Paramify receives incidents from GuardDuty and SentinelOne. GuardDuty incidents are pulled down via bash scripts to display the GuardDuty setup. Incidents that are identified by SentinelOne have automated alert configurations to create a ticket within Slack that is then worked against by the Paramify team. SentinelOne is the SIEM for the environment and there is monitoring services available here. Paramify has the ability to look back at incidents to identify any type of patterns if needed. Paramify has an objective assessment of each incident to identify if vulnerabilities were exploited within the IRP. Paramify has a quarterly event to review past incidents and perform analysis to identify any patterns or vulnerability exploitations."'
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Guard Duty
                  description: Script for AWS GuardDuty validation
                  instructions: "Check GuardDuty setup - List detector IDs `aws guardduty list-detectors` - Get detector configuration details `aws guardduty get-detector --detector-id <detector-id>` Output: Creates unique JSON file and appends to directory-based monitoring files"
                  commands: ""
                  automated: Yes
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Untitled Artifact
                      reference: https://github.com/paramify/fedramp-20x-pilot/blob/main/evidence/guard_duty.sh
                      outputResults: ""
                      effectiveDate: 2025-06-16T00:00:00.000Z
                  - artifact:
                      name: Guard Duty
                      reference: guard_duty.json
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: SentinelOne SIEM Configuration
                  description: >-
                    This evidence demonstrates how Paramify configures and uses SentinelOne as its Security Information and Event Management (SIEM) platform. SentinelOne’s Singularity Data Lake (SDL) aggregates log information to enable centralized review of events, activities, and changes. Evidence includes:


                    SIEM S1 SDL Monitors – validation that monitors are configured in SentinelOne.


                    Singularity Data Lake Screenshot – confirmation that log data is being collected and available for review.
                  instructions: "Log in to SentinelOne Console. Navigate to Singularity Data Lake to view active monitors and verify log collection. View monitors and data entries showing SIEM activity. Export or document configuration details from the SIEM settings to confirm centralization of log data (eg: monitor configuration JSON file)"
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: SIEM SentinelOne SDL URL
                      reference: https://paramify.okta-gov.com/home/paramify_sentinelonegov_1/0oatd4sswPaukgPyY0j6/alntd6fpsi2CbAab00j6
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: SIEM S1 SDL Monitors
                      reference: SIEM-S1-SDL-monitors.json
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
                  - artifact:
                      name: SIEM Singularity Data Lake Screenshot
                      reference: SIEM - Singularity Data Lake screenshot.png
                      outputResults: ""
                      effectiveDate: 2025-06-24T00:00:00.000Z
              - evidence:
                  name: Incident Review Meeting (Quarterly)
                  description: Quarterly Incident Review Meeting led by the Incident Response Admin. Focuses on analyzing past incidents to identify patterns and vulnerabilities for improved response and security.
                  instructions: Google Drive stores log of incidents, after action reports, and incident response tests. Google Calendar meeting maintains quarterly schedule to meet and review past incidents for patterns and vulnerabilities.
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: "Google Calendar event "
                      reference: https://calendar.google.com/calendar/event?action=TEMPLATE&tmeid=NnNtcmU4M2ZtNzRzcm9hcHQ5bmE5NDdkZWpfMjAyNTA3MjFUMTcwMDAwWiBpc2FhYy50ZXVzY2hlckBwYXJhbWlmeS5jb20&tmsrc=isaac.teuscher%40paramify.com&scp=ALL
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: "Meeting Notes (Google Doc) "
                      reference: https://docs.google.com/document/d/1On_mz1ANiBwG1b127xFCCvtIf0ljXc4HTJK4ztLKoR0/edit?usp=sharing
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
                  - artifact:
                      name: Incident Review Meeting Calendar Invite
                      reference: incident review meeting calendar invite.pdf
                      outputResults: ""
                      effectiveDate: 2025-07-03T00:00:00.000Z
              - evidence:
                  name: Incident Response (Incidents, Tests, & After Action Reports)
                  description: Incident Response Logs, Tests, and After Action Reports
                  instructions: "The \"IR Incidents, Tests, & After Action Reports\" Google Drive folder contains incident response logs, IR tests and after action reports. Currently there have not been any incidents in the FedRAMP boundary necessitating the IR process. There is an incident response test report from November 1, 2024. IR tests are conducted annually and after action reports are written for each incident or incident test. Incident Response Test: The folder contains a report detailing a \"GovCloud Incident Response Test\" conducted on November 1, 2024, in Lehi, UT. The test assessed the effectiveness of coordination, procedures, and notification processes during a security scenario involving malware identification and remediation. Key participants included Isaac Teuscher, Mike Cook, and Brad Bartholomew. The test simulated a malware report from SentinelOne, and SentinelOne Vigilance actively monitored and responded to the event by quarantining and removing the malicious file. Learnings and After Action Items: The report highlights several learnings from the test, such as the need to customize Slack alerts, verify appropriate alert channels, explore restrictions on file uploads, and update notification email addresses. Specific after-action items include Isaac coordinating with SentinelOne on alert customization and verifying the Slack alert channel, Mike working with the product team on file upload restrictions, and Isaac reaching out to SentinelOne Vigilance regarding their notification email address. Incident Response Plan The Incident Response Plan (IRP) outlines Paramify's policies and procedures for addressing computer security incidents, focusing on preparation, detection, analysis, eradication, and containment. Key details from the document include: Prepared by: Paramify, with an initial draft by Brad Bartholomew on September 27, 2024. Approval: Approved by Kenny Scott (CEO), Mike Cook (CTO), and Brad Bartholomew (CISO). Review: The document is to be reviewed annually, with the next review date set for September 27, 2025. Scope: Pertains to Paramify's FedRAMP Authorization and the Paramify Cloud system, particularly incidents affecting service restoration for U.S. government customers. It aligns with NIST 800-61, Rev. 2 guidelines. Incident Response Team (IRT): Composed of various roles, including CISO (functioning as Incident Response Manager), System Owner, CTO, and Corporate Incident Handlers, all with specific responsibilities in the IR process. Isaac Teuscher is listed as the Incident Response Manager. Incident Handling Phases:Preparation: Establishing and training the IRT, developing procedures, and acquiring tools. Detection: Monitoring and acknowledging events, with processes initiated by reports or suspicious activity. Potential event sources include system alerts, logging, anti-virus, publicly available information on vulnerabilities, and reports from internal/external personnel. Analysis: In-depth examination of events to determine if they represent incidents, using an Event Decision Flowchart. This phase also includes external reporting processes to US-CERT and FedRAMP POCs. Containment, Eradication, and Recovery: Actions to limit incident impact, eliminate the problem, restore systems, and remediate vulnerabilities. Post-Incident Activity: Official closure of the incident, documentation, final communications, and identification of lessons learned through Root Cause Analysis (using the \"Five Whys\" method) and After Action Reports. Incident Tracking: Incidents are tracked in the GitLab ITSM Ticketing System, with details such as title, severity, due date, assignees, status, summary, and timeline. Appendices: Include incident handling scenarios and the US-CERT Incident Notification Template, which requires information on functional impact, information impact, recoverability, detection time, systems impacted, network location, point of contact, attack vectors, classification, indicators of compromise, and mitigation activities."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Incident Response Test - 11_1_2024.pdf
                      reference: ""
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Paramify Incident Response Plan (IRP)
                      reference: SSP-A08-Paramify-IRP-2024-09-27 - 9_30_24, 2_14 PM (1).pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: IR Incidents, Tests, & After Action Reports (Google Drive folder)
                      reference: https://drive.google.com/drive/folders/1zDE2ZwVDyih3Is9if6U6aGHdExlXp9Oo?usp=drive_link
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: SentinelOne MDR Scope Of Service
                      reference: MDR Scope of Service - v1.0 (1).pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
          - validation:
              shortName: INR-03
              description: Generate after action reports and regularly incorporate lessons learned into operations
              implementation:
              - >
                Title: Incident Response Post-mortem

                Content: The @Incident Response Admin documents incident handling lessons learned in @Google Drive to update response procedures, training and testing/exercises. Notes and documents are compiled to review incident timeline and actions, identify weaknesses, gaps, and inefficiencies. Improvement techniques are implemented, and recommendations are made with action items assigned to key stakeholders.
              implementationStatus: Implemented
              digitalSignature: ""
              assessmentStatus: "True"
              assessmentSteps:
              - assessmentStep:
                  method: Examine
                  status: PASS
                  result: As part of the incident response process there is an after action report and learnings that are documented. SentinelOne is part of the incident detection process and creates automated tickets and allows for status tracking.
              assessedBy: Jorden Foster
              assessedOn: ""
              Evidences:
              - evidence:
                  name: Incident Response (Incidents, Tests, & After Action Reports)
                  description: Incident Response Logs, Tests, and After Action Reports
                  instructions: "The \"IR Incidents, Tests, & After Action Reports\" Google Drive folder contains incident response logs, IR tests and after action reports. Currently there have not been any incidents in the FedRAMP boundary necessitating the IR process. There is an incident response test report from November 1, 2024. IR tests are conducted annually and after action reports are written for each incident or incident test. Incident Response Test: The folder contains a report detailing a \"GovCloud Incident Response Test\" conducted on November 1, 2024, in Lehi, UT. The test assessed the effectiveness of coordination, procedures, and notification processes during a security scenario involving malware identification and remediation. Key participants included Isaac Teuscher, Mike Cook, and Brad Bartholomew. The test simulated a malware report from SentinelOne, and SentinelOne Vigilance actively monitored and responded to the event by quarantining and removing the malicious file. Learnings and After Action Items: The report highlights several learnings from the test, such as the need to customize Slack alerts, verify appropriate alert channels, explore restrictions on file uploads, and update notification email addresses. Specific after-action items include Isaac coordinating with SentinelOne on alert customization and verifying the Slack alert channel, Mike working with the product team on file upload restrictions, and Isaac reaching out to SentinelOne Vigilance regarding their notification email address. Incident Response Plan The Incident Response Plan (IRP) outlines Paramify's policies and procedures for addressing computer security incidents, focusing on preparation, detection, analysis, eradication, and containment. Key details from the document include: Prepared by: Paramify, with an initial draft by Brad Bartholomew on September 27, 2024. Approval: Approved by Kenny Scott (CEO), Mike Cook (CTO), and Brad Bartholomew (CISO). Review: The document is to be reviewed annually, with the next review date set for September 27, 2025. Scope: Pertains to Paramify's FedRAMP Authorization and the Paramify Cloud system, particularly incidents affecting service restoration for U.S. government customers. It aligns with NIST 800-61, Rev. 2 guidelines. Incident Response Team (IRT): Composed of various roles, including CISO (functioning as Incident Response Manager), System Owner, CTO, and Corporate Incident Handlers, all with specific responsibilities in the IR process. Isaac Teuscher is listed as the Incident Response Manager. Incident Handling Phases:Preparation: Establishing and training the IRT, developing procedures, and acquiring tools. Detection: Monitoring and acknowledging events, with processes initiated by reports or suspicious activity. Potential event sources include system alerts, logging, anti-virus, publicly available information on vulnerabilities, and reports from internal/external personnel. Analysis: In-depth examination of events to determine if they represent incidents, using an Event Decision Flowchart. This phase also includes external reporting processes to US-CERT and FedRAMP POCs. Containment, Eradication, and Recovery: Actions to limit incident impact, eliminate the problem, restore systems, and remediate vulnerabilities. Post-Incident Activity: Official closure of the incident, documentation, final communications, and identification of lessons learned through Root Cause Analysis (using the \"Five Whys\" method) and After Action Reports. Incident Tracking: Incidents are tracked in the GitLab ITSM Ticketing System, with details such as title, severity, due date, assignees, status, summary, and timeline. Appendices: Include incident handling scenarios and the US-CERT Incident Notification Template, which requires information on functional impact, information impact, recoverability, detection time, systems impacted, network location, point of contact, attack vectors, classification, indicators of compromise, and mitigation activities."
                  commands: ""
                  automated: No
                  scriptName: ""
                  validationRules: []
                  validatedBy: ""
                  validateDate: ""
                  remarks: ""
                  Artifacts:
                  - artifact:
                      name: Incident Response Test - 11_1_2024.pdf
                      reference: ""
                      outputResults: ""
                      effectiveDate: ""
                  - artifact:
                      name: Paramify Incident Response Plan (IRP)
                      reference: SSP-A08-Paramify-IRP-2024-09-27 - 9_30_24, 2_14 PM (1).pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: IR Incidents, Tests, & After Action Reports (Google Drive folder)
                      reference: https://drive.google.com/drive/folders/1zDE2ZwVDyih3Is9if6U6aGHdExlXp9Oo?usp=drive_link
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
                  - artifact:
                      name: SentinelOne MDR Scope Of Service
                      reference: MDR Scope of Service - v1.0 (1).pdf
                      outputResults: ""
                      effectiveDate: 2025-07-01T00:00:00.000Z
